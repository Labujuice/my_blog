{
    "version": "https://jsonfeed.org/version/1",
    "title": "Kenny&#x27;s Blog",
    "description": "",
    "home_page_url": "https://labujuice.github.io/my_blog",
    "feed_url": "https://labujuice.github.io/my_blog/feed.json",
    "user_comment": "",
    "author": {
        "name": "Kenny Chan"
    },
    "items": [
        {
            "id": "https://labujuice.github.io/my_blog/yidocker-mo-niarm-ubuntu.html",
            "url": "https://labujuice.github.io/my_blog/yidocker-mo-niarm-ubuntu.html",
            "title": "以Docker模擬arm ubuntu",
            "summary": "Docker image參考 https://hub.docker.com/r/arm64v8/ubuntu/ 可以以以下指令將 該image pull下來 docker pull arm64v8/ubuntu:18.04Run以前景執行進行測試 docker run -it arm64v8/ubuntu:18.04得到了以下error WARNING: The requested image&#39;s platform (linux/arm64/v8) does not match the detected host platform (linux/amd64) and no specific platform was requestedstandard_init_linux.go:228: exec user process caused: exec format error 安裝qemu用於環景模擬： sudo apt install qemu-user-staticBack&hellip;",
            "content_html": "<h2 id=\"docker-image\">Docker image</h2>\n<p>參考 <a href=\"https://hub.docker.com/r/arm64v8/ubuntu/\">https://hub.docker.com/r/arm64v8/ubuntu/</a> 可以以以下指令將 該image pull下來  </p>\n<pre><code>docker pull arm64v8/ubuntu:18.04</code></pre><h2 id=\"run\">Run</h2>\n<p>以前景執行進行測試</p>\n<pre><code>docker run -it arm64v8/ubuntu:18.04</code></pre><p>得到了以下error <code>WARNING: The requested image&#39;s platform (linux/arm64/v8) does not match the detected host platform (linux/amd64) and no specific platform was requested\nstandard_init_linux.go:228: exec user process caused: exec format error</code></p>\n<h2 id=\"排除問題\">排除問題</h2>\n<p>安裝qemu用於環景模擬：</p>\n<pre><code>sudo apt install qemu-user-static</code></pre><p>Back to Run and enjoy~</p>\n",
            "author": {
                "name": "Kenny Chan"
            },
            "tags": [
                   "Docker"
            ],
            "date_published": "2021-11-25T16:11:50+08:00",
            "date_modified": "2021-11-25T16:14:12+08:00"
        },
        {
            "id": "https://labujuice.github.io/my_blog/submodule-with-gitlab-cicd.html",
            "url": "https://labujuice.github.io/my_blog/submodule-with-gitlab-cicd.html",
            "title": "Submodule with Gitlab CI/CD",
            "summary": "話題緣由因為專案需求將部份程式使用Submodule的形式進行包裝, 以方便將這些模組化的程式供應給眾多專案使用, 降低相同程式維護的成本… 但不幸的事情發生了, 原先已經將這些程式打整包的, 使用gitlab-ci進行編譯與跑測試腳本, 在加入Submodule之後就沒辦法正確拉到該submodule內的東西, 接著就發生了 Runner 回報fail的狀況. 經過谷歌大神以及Gitlab的說明文件解釋, 大致可以將解決方向整理出來： [submodule &quot;project-x&quot;]path = project-xurl = https://gitserver.com/group/project-x.git #url = ../../group/project-x.git #SSHpath: 這個模組要放置的路徑, url: 這個模組本來的路徑.修改gitlab-ci.yml 內的variables的設定variables:GIT_SUBMODULE_STRATEGY: recursive #can bet set to normal or recursive理論上完成以下兩項 Runner就應該要可以正常拉到 Submodule的檔案並且正確執行，但天底下就是有這麼一個意外….. 如果是私人專案或者是封閉的git server該如何呢？ 我所碰到的例外情境是封閉環境下的GitServer並且非Public專案, 使用Http的方法無法正確拉到submodule的檔案. 回想一下前面我們製作Runner的時候, 其實是使用Key的方式進行認證, 而SSH通道的使用也必須要先有Key才可以開通, 所以我第一時間想到的是既然是這樣「那應該也是走SSH吧？」…. 沒錯,&hellip;",
            "content_html": "<h2 id=\"話題緣由\">話題緣由</h2>\n<p>因為專案需求將部份程式使用Submodule的形式進行包裝, 以方便將這些模組化的程式供應給眾多專案使用, 降低相同程式維護的成本…  </p>\n<p>但不幸的事情發生了, 原先已經將這些程式打整包的, 使用gitlab-ci進行編譯與跑測試腳本, 在加入Submodule之後就沒辦法正確拉到該submodule內的東西, 接著就發生了 Runner 回報fail的狀況.</p>\n<h2 id=\"解決方法\">解決方法</h2>\n<p>經過谷歌大神以及Gitlab的說明文件解釋, 大致可以將解決方向整理出來：</p>\n<ol>\n<li>確定 <code>.gitmodules</code> 的設定正確, 以下來自gitlab的範例說明了新增 submodule的方法<pre><code>[submodule &quot;project-x&quot;]\npath = project-x\nurl = https://gitserver.com/group/project-x.git\n #url = ../../group/project-x.git #SSH</code></pre>path: 這個模組要放置的路徑, url: 這個模組本來的路徑.</li>\n<li>修改<code>gitlab-ci.yml</code> 內的<code>variables</code>的設定<pre><code>variables:\nGIT_SUBMODULE_STRATEGY: recursive  #can bet set to normal or recursive</code></pre></li>\n</ol>\n<hr>\n<p>理論上完成以下兩項 Runner就應該要可以正常拉到 Submodule的檔案並且正確執行，但天底下就是有這麼一個意外….. 如果是私人專案或者是封閉的git server該如何呢？</p>\n<h2 id=\"例外情境\">例外情境</h2>\n<p>我所碰到的例外情境是封閉環境下的GitServer並且非Public專案, 使用Http的方法無法正確拉到submodule的檔案.<br>回想一下前面我們製作Runner的時候, 其實是使用Key的方式進行認證, 而SSH通道的使用也必須要先有Key才可以開通, 所以我第一時間想到的是既然是這樣「<strong>那應該也是走SSH吧？</strong>」….  </p>\n<p>沒錯, 這種情況下確實就是<strong>走ssh</strong>了….</p>\n<hr>\n<p>例外題： <strong>那不同server 又是非public專案該如何呢？</strong> 這點還沒碰到過待實做, 如果有結果會在貼上來。</p>\n<h2 id=\"referencies\">Referencies</h2>\n<ol>\n<li><a href=\"https://docs.gitlab.com/ee/ci/git_submodules.html\">Gitlab Submodule with Gitlab CI/CD</a></li>\n</ol>\n",
            "author": {
                "name": "Kenny Chan"
            },
            "tags": [
                   "Git"
            ],
            "date_published": "2021-10-10T23:02:41+08:00",
            "date_modified": "2021-10-10T23:02:41+08:00"
        },
        {
            "id": "https://labujuice.github.io/my_blog/yi-shuang-ci-tie-qu-dai-ci-tie-quan.html",
            "url": "https://labujuice.github.io/my_blog/yi-shuang-ci-tie-qu-dai-ci-tie-quan.html",
            "title": "以雙磁鐵取代磁鐵圈",
            "summary": "緣由製作音量大小聲的旋鈕，過去大部份的設計都使用可變電阻進行製作，藉由改變可變電阻阻值大小進而量測到不同的分電壓，藉由分壓改變量來決定要增加多少音量或者減少多少音量，以達成細調的功能。 可變電阻有一個很大的問題，隨著環境不同，溫度、濕度、壓力等都會影響他的飄移範圍與可靠度，長期在濕度較高的環境甚至會導致可變電阻接觸面氧化，造成音量亂跳、忽大忽小等狀況，近而影響使用者的體驗。 我們的好朋友磁鐵＋磁力ＥＮＣＯＤＥＲ可以取代可變電阻達成藉由轉動所產生變化調整音量大小的任務，成本上甚至比一些高階精密可變電阻來得低。 磁力ＥＮＣＯＤＥＲ需要的磁鐵強度通常會給一個範圍，要貼的夠近才可以正確感應。 這時候產生了一些問題： 基本上最佳的設計應該是使用足夠大小的磁環確保磁場均勻，固定上也比單磁鐵黏在中間來得好加工處理，但是磁環大部分是特殊規格， 在元件的取得上比常見的磁鐵尺寸規格難，並且需要負擔開模加工的費用。 這時候其實不必太擔心，根據磁力學磁場會封閉磁力線的特性，可以使用磁鐵串接的方式來達成類似的目的，並且中間依然是空心的狀態，又可以量到想要的磁力大小，怎麼達成呢？我們用 magpylib來進行模擬。 假設我們需求旋鈕底座給的深度只有2mm，中間孔洞直徑 D = 10mm ，上網找現成的銣鐵棚磁鐵，以我的範例來說我找到的磁鐵是 1mm*4mm*2mm，這時候我就得去計算到底10mm間隔下以磁鐵上緣與兩側磁鐵中心點做量測，要串接幾個磁鐵才可以達到一般ＥＮＣＯＤＥＲ需要的30~50mT。 以我上方寫的磁鐵撰寫的範例 做為參考 import numpy as npimport matplotlib.pyplot as pltfrom magpylib.source.magnet import Box,Cylinderfrom magpylib import Collection, displaySystem#distance between magnetsdis = 10# magnet size and field mag_size_x = 1mag_size_y = 4mag_size_z =&hellip;",
            "content_html": "<h2 id=\"緣由\">緣由</h2>\n<p>製作音量大小聲的旋鈕，過去大部份的設計都使用<strong>可變電阻</strong>進行製作，藉由改變可變電阻阻值大小進而量測到不同的分電壓，藉由分壓改變量來決定要增加多少音量或者減少多少音量，以達成細調的功能。  </p>\n<p>可變電阻有一個很大的問題，隨著環境不同，溫度、濕度、壓力等都會影響他的飄移範圍與可靠度，長期在濕度較高的環境甚至會導致可變電阻接觸面氧化，造成音量亂跳、忽大忽小等狀況，近而影響使用者的體驗。  </p>\n<h2 id=\"解法\">解法</h2>\n<p>我們的好朋友磁鐵＋磁力ＥＮＣＯＤＥＲ可以取代可變電阻達成藉由轉動所產生變化調整音量大小的任務，成本上甚至比一些高階精密可變電阻來得低。</p>\n<h2 id=\"可是瑞凡，磁鐵哪來？\">可是瑞凡，磁鐵哪來？</h2>\n<p>磁力ＥＮＣＯＤＥＲ需要的磁鐵強度通常會給一個範圍，要貼的夠近才可以正確感應。<br>這時候產生了一些問題：  </p>\n<ol>\n<li>磁鐵尺寸不一強度材質都會影響結果。</li>\n<li>如果想要整體設計薄一點，那是不是使用磁鐵圈比較好？</li>\n<li>磁鐵開模費用，模具費用、製作時程、產量價格？</li>\n</ol>\n<p>基本上最佳的設計應該是使用<strong>足夠大小的磁環</strong>確保磁場均勻，固定上也比單磁鐵黏在中間來得好加工處理，但是磁環大部分是特殊規格， 在元件的取得上比常見的磁鐵尺寸規格難，並且需要負擔開模加工的費用。  </p>\n<p>這時候其實不必太擔心，根據磁力學磁場會封閉磁力線的特性，可以使用磁鐵串接的方式來達成類似的目的，並且中間依然是空心的狀態，又可以量到想要的磁力大小，怎麼達成呢？我們用 magpylib來進行模擬。</p>\n<h2 id=\"模擬\">模擬</h2>\n<p>假設我們需求旋鈕底座給的深度只有<code>2mm</code>，中間孔洞直徑 <code>D = 10mm</code> ，上網找現成的銣鐵棚磁鐵，以我的範例來說我找到的磁鐵是 <code>1mm*4mm*2mm</code>，這時候我就得去計算到底10mm間隔下以磁鐵上緣與兩側磁鐵中心點做量測，要串接幾個磁鐵才可以達到一般ＥＮＣＯＤＥＲ需要的30~50mT。</p>\n<p>以我上方寫的磁鐵撰寫的<a href=\"https://github.com/Labujuice/Learn_magpylib/tree/main/5_Two%20magnet%20and%20field\">範例</a>  做為參考</p>\n<pre><code class=\"language-python\">import numpy as np\nimport matplotlib.pyplot as plt\nfrom magpylib.source.magnet import Box,Cylinder\nfrom magpylib import Collection, displaySystem\n\n#distance between magnets\ndis = 10\n\n# magnet size and field \nmag_size_x = 1\nmag_size_y = 4\nmag_size_z = 2\n\nmag_field_x = 1300\nmag_field_y = 0\nmag_field_z = 0\n\npos_x = (dis + mag_size_x/2*2)/2\npos_z = - mag_size_z/2\n\n# create magnets 這邊設定磁鐵上緣靠著z=0這平面,注意: pos是以磁鐵中心為主\nsL = Box(mag=(mag_field_x,mag_field_y,mag_field_z), dim=(mag_size_x,mag_size_y,mag_size_z), pos=(-pos_x,0,pos_z))\nsL_1 = Box(mag=(mag_field_x,mag_field_y,mag_field_z), dim=(mag_size_x,mag_size_y,mag_size_z), pos=(-pos_x,0,pos_z))\nsL_2 = Box(mag=(mag_field_x,mag_field_y,mag_field_z), dim=(mag_size_x,mag_size_y,mag_size_z), pos=(-pos_x,0,pos_z))\nsR = Box(mag=(mag_field_x,mag_field_y,mag_field_z), dim=(mag_size_x,mag_size_y,mag_size_z), pos=(pos_x,0,pos_z))\nsR_1 = Box(mag=(mag_field_x,mag_field_y,mag_field_z), dim=(mag_size_x,mag_size_y,mag_size_z), pos=(pos_x,0,pos_z))\nsR_2 = Box(mag=(mag_field_x,mag_field_y,mag_field_z), dim=(mag_size_x,mag_size_y,mag_size_z), pos=(pos_x,0,pos_z))\n\n#move copy bos\nsL_1.move((-mag_size_x,0,0))\nsR_1.move((mag_size_x,0,0))\nsL_2.move((-2*mag_size_x,0,0))\nsR_2.move((2*mag_size_x,0,0))\n\n# create collection\nc = Collection(sL,sL_1,sL_2,sR,sR_1,sR_2)\n\n# calculate B-field on a grid\nxs = np.linspace(-10,10,33)\nzs = np.linspace(-10,10,44)\nPOS = np.array([(x,0,z) for z in zs for x in xs])\nBs = c.getB(POS).reshape(44,33,3)     #&lt;--VECTORIZED\n\n# create figure\nfig = plt.figure(figsize=(9,5))\nax1 = fig.add_subplot(121, projection=&#39;3d&#39;)  # 3D-axis\nax2 = fig.add_subplot(122)                   # 2D-axis\n\n# display system geometry on ax1\ndisplaySystem(c, subplotAx=ax1, suppress=True)\n\n# display field in xz-plane using matplotlib\nX,Z = np.meshgrid(xs,zs)\nU,V = Bs[:,:,0], Bs[:,:,2]\nax2.streamplot(X, Z, U, V, color=np.log(U**2+V**2))\n\nprint(c.getB([0,0,0]))\n\nplt.show()</code></pre>\n<p>最後可以算出來在<code>0,0,0·</code>座標可以得到32.9mT的剩磁，故這樣的設計是可以用的。</p>\n",
            "author": {
                "name": "Kenny Chan"
            },
            "tags": [
                   "Magpylib"
            ],
            "date_published": "2021-04-28T00:36:37+08:00",
            "date_modified": "2021-04-28T00:37:37+08:00"
        },
        {
            "id": "https://labujuice.github.io/my_blog/li-yongmagpylib.html",
            "url": "https://labujuice.github.io/my_blog/li-yongmagpylib.html",
            "title": "利用Magpylib模擬磁鐵",
            "summary": "Sources第一個範例先了解怎麼創造磁鐵，基本的磁鐵模組在magpylib.source.magnet內主要分成三種不同的形式存在： 以上這幾種不同形式的磁鐵物件，需要做一些基本的設定才可以變成一個磁鐵： 透過說明書可以了解 magpylib.source.magnet 除了可以定義磁鐵的型態與規格外，同時也可以做某位置下的磁場強度這件事情，這邊留下一筆範例作為筆記： from magpylib.source.magnet import Box, Cylinder, Sphere# Simuate a N38 5 * 5 *5 mm #https://www.leeyed.com/rare_earth_magnet.htmls_Box = Box(mag=(0,0,1220), dim=(5,5,5), pos=(0,0,-2.5))s_Cylinder = Cylinder(mag=(0, 0, 1220), dim=(5, 5), pos=(0.0, 0.0, -2.5), angle=0.0, axis=(0.0, 0.0, 1.0), iterDia=50)s_Sphere = Sphere(mag=(0.0, 0.0, 1220), dim=5.0, pos=(0.0, 0.0,&hellip;",
            "content_html": "<h1 id=\"sources\">Sources</h1>\n<p>第一個範例先了解怎麼創造磁鐵，基本的磁鐵模組在<code>magpylib.source.magnet</code>內主要分成三種不同的形式存在：  </p>\n<ul>\n<li>Box<br>magpylib.source.magnet.Box(mag=(0.0, 0.0, 0.0), dim=(0.0, 0.0, 0.0), pos=(0.0, 0.0, 0.0), angle=0.0, axis=(0.0, 0.0, 1.0))</li>\n<li>Cylinder<br>magpylib.source.magnet.Cylinder(mag=(0.0, 0.0, 0.0), dim=(0.0, 0.0), pos=(0.0, 0.0, 0.0), angle=0.0, axis=(0.0, 0.0, 1.0), iterDia=50)</li>\n<li>Sphere<br>magpylib.source.magnet.Sphere(mag=(0.0, 0.0, 0.0), dim=0.0, pos=(0.0, 0.0, 0.0), angle=0.0, axis=(0.0, 0.0, 1.0))</li>\n</ul>\n<p>以上這幾種不同形式的磁鐵物件，需要做一些基本的設定才可以變成一個磁鐵：  </p>\n<ul>\n<li>Mag:<br>鐵強度，這邊就是定義磁鐵的Remanence Br剩磁，是用來表示磁場強度的，單位則是常見的 mT ，當然如果今天是知道高斯也可以，做個單位轉換就可以解決了。方向有正負號，可以設定充磁方向 與 根據磁鐵設定剩磁大小。</li>\n<li>Dim:<br>Dimension的意思，根據不同形式的磁鐵有不同的設定方式， box-&gt;長,寬,高、Cylinder-&gt;直徑,高度、Sphere-&gt;直徑。單位mm。</li>\n<li>Pos:<br>表示位置，這個是指磁鐵物件的中心座標位置，如果設定0,0,0則是在origin的地方作為磁鐵中心的意思，單位mm。</li>\n<li>Angle:<br>轉動的角度，單位deg。</li>\n<li>Axis:<br>轉軸向量。</li>\n</ul>\n<h1 id=\"取得磁場強度\">取得磁場強度</h1>\n<p>透過說明書可以了解 <code>magpylib.source.magnet</code> 除了可以定義磁鐵的型態與規格外，同時也可以做某位置下的磁場強度這件事情，這邊留下一筆<a href=\"https://github.com/Labujuice/Learn_magpylib/blob/main/1_magnet%20simulation/mag_box.py\">範例</a>作為筆記：</p>\n<pre><code class=\"language-python\">from magpylib.source.magnet import Box, Cylinder, Sphere\n\n# Simuate a N38 5 * 5 *5 mm \n#https://www.leeyed.com/rare_earth_magnet.html\ns_Box = Box(mag=(0,0,1220), dim=(5,5,5), pos=(0,0,-2.5))\ns_Cylinder = Cylinder(mag=(0, 0, 1220), dim=(5, 5), pos=(0.0, 0.0, -2.5), angle=0.0, axis=(0.0, 0.0, 1.0), iterDia=50)\ns_Sphere = Sphere(mag=(0.0, 0.0, 1220), dim=5.0, pos=(0.0, 0.0, -2.5), angle=0.0, axis=(0.0, 0.0, 1.0))\n\nprint(s_Box.getB([0,0,5]))\nprint(s_Cylinder.getB([0,0,5]))\nprint(s_Sphere.getB([0,0,5]))</code></pre>\n<p>根據這個範例，可以透過<code>getB(x,y,z)</code>取得該做標下的磁場強度，這樣就可以當作我們設計磁鐵大小或者距離。</p>\n<h1 id=\"實際應用的範例\">實際應用的範例</h1>\n<ol>\n<li>透過單軸磁力senosr感應磁鐵的距離做按鈕、滑軌等應用。</li>\n<li>模擬馬達定轉子磁鐵產生的磁場需要多少距離可以當作沒有干擾。</li>\n<li>模擬磁力encoder製作旋鈕需要的磁鐵距離。</li>\n<li>模擬防盜門窗上磁鐵與感應器的距離。</li>\n<li>掃地機器人感應軟性磁鐵作為柵欄的功能。</li>\n</ol>\n",
            "author": {
                "name": "Kenny Chan"
            },
            "tags": [
                   "Magpylib"
            ],
            "date_published": "2021-03-21T14:54:14+08:00",
            "date_modified": "2021-04-28T00:37:44+08:00"
        },
        {
            "id": "https://labujuice.github.io/my_blog/magpylib-an-zhuang.html",
            "url": "https://labujuice.github.io/my_blog/magpylib-an-zhuang.html",
            "title": "Magpylib 基本介紹與安裝",
            "summary": "緣由因為專案開發有使用到磁鐵與磁力感測器，對於磁場單位與使用情境相當陌生的我就開始在網路上尋找做磁路模擬與分析的工具，無奈找到大部分的工具都是搭配像是Solidworks這種套裝軟體的plug-in，或者是matlab這類專業的數值軟體的套件。 對於崇尚使用免費公開並且只要有根據並且87%成效以上的我來說實在是口味不符，只好更大力地在網上衝浪，很幸運的找到 Magpylib 這套 python3的module。 根據官方文件說明了解，這個模組安裝輕量、使用便利，基本上可以少量的資源完成一些簡單的三圍磁場模擬，例如： 當然他也有一些限制： 根據個人的喜好，還是留下pip的安裝方式好了。 安裝的方式相當簡單，在 Linux and MacOS底下都是使用以下指令進行安裝： pip3 install magpylib其他的就留到下一篇吧，想睡了。 Magpylib document Magpylib Github",
            "content_html": "<h1 id=\"緣由\">緣由</h1>\n<p>因為專案開發有使用到磁鐵與磁力感測器，對於磁場單位與使用情境相當陌生的我就開始在網路上尋找做磁路模擬與分析的工具，無奈找到大部分的工具都是搭配像是Solidworks這種套裝軟體的plug-in，或者是matlab這類專業的數值軟體的套件。<br>對於崇尚使用免費公開並且只要有根據並且87%成效以上的我來說實在是口味不符，只好更大力地在網上衝浪，很幸運的找到 Magpylib 這套 python3的module。</p>\n<h1 id=\"magpylib-可以幹啥？\">Magpylib 可以幹啥？</h1>\n<p>根據官方文件說明了解，這個模組安裝輕量、使用便利，基本上可以少量的資源完成一些簡單的三圍磁場模擬，例如：  </p>\n<ol>\n<li>模擬立方體磁鐵圓形磁鐵產生的磁場向量。</li>\n<li>導線電流所產生的磁場向量</li>\n<li>可以模擬 磁矩 (magnetic moments) <a href=\"https://en.wikipedia.org/wiki/Magnetic_moment\">wikipedia</a></li>\n</ol>\n<p>當然他也有一些限制：  </p>\n<ol>\n<li>對於磁場必須要基本的概念與了解<br>對Br的認知、對使用環境的限制等，關係到模擬與實際的差異</li>\n<li>不能害怕寫一些簡單的python 程式<br>用Matlab也是得寫一些程式，用其他繪圖軟體也得繪圖＋設定參數，寫程式很基本的</li>\n<li>magnetic shields or transformer cores 是模擬不出來的<br>Shielding 就不談了，這套軟體模擬不出，另外 transformer cores 關係到內部矽鋼片使用的好壞，這一套也是模擬不出來的。</li>\n</ol>\n<h1 id=\"安裝\">安裝</h1>\n<p>根據個人的喜好，還是留下pip的安裝方式好了。<br>安裝的方式相當簡單，在 Linux and MacOS底下都是使用以下指令進行安裝：  </p>\n<pre><code>pip3 install magpylib</code></pre><p>其他的就留到下一篇吧，想睡了。</p>\n<h1 id=\"references\">References</h1>\n<p><a href=\"https://magpylib.readthedocs.io/\">Magpylib document</a></p>\n<p><a href=\"https://github.com/magpylib/magpylib\">Magpylib Github</a></p>\n",
            "author": {
                "name": "Kenny Chan"
            },
            "tags": [
                   "Magpylib"
            ],
            "date_published": "2021-03-21T00:36:57+08:00",
            "date_modified": "2021-04-28T00:37:52+08:00"
        },
        {
            "id": "https://labujuice.github.io/my_blog/stm32-freertos-printf-f-issue.html",
            "url": "https://labujuice.github.io/my_blog/stm32-freertos-printf-f-issue.html",
            "title": "Stm32 FreeRTOS Printf %f issue",
            "summary": "故事的起源stm32 使用Cube 生成之專案在使用printf列印%f的時候發現printf %f 轉出長度為0的字串。 經過爬文了解，搭配硬體浮點運算器需要printf float ，需要在LINKER_FLAGS 加上-u _printf_float ，這樣才可以正常解出float的字串。 即便已經加上_printf_float ，在task內 printf %f 還是會遇到死當的問題，也是爬文發現有網友去trace break point，發現進入hard fault。 經過交叉測試發現在專案開始還沒帶起OS context switch的時候就先使用一次 print %f, 這樣就不會在task內列印%f時發生hard fault。 原因暫時還不知道，還要追追看斷點或者爬文，找到後在更新上來。 根據網友討論的解法，無限增加stack size的深度就可以避免這個問題，但這個真的是最佳解法嘛？ 經過實測確實初步可以減少當機機率，但是因為動態記憶體的使用因素，可能會隨著列印 float 數字不同產生當機的現象，而且我也有開個很誇張的 stack size = 4096 * 4 byte，它乾脆不努力了直接不輸出也沒進入error callback。 *這些手段都實做了還是會當機， 記憶體永遠都不夠用的，也不建議無限亂開* 根據爬文網友結果，有幾種作法 想辦法自己刻出printf的功能，不要使用stdio內的這些function。 把malloc改成FreeRTOS原生pvPortMalloc，但printf需要realloc()這邊沒有提供，可能也會失敗。&hellip;",
            "content_html": "<h1 id=\"故事的起源\">故事的起源</h1>\n<p>stm32 使用Cube 生成之專案在使用<code>printf</code>列印<code>%f</code>的時候發現<code>printf</code>  <code>%f</code> 轉出長度為0的字串。</p>\n<h1 id=\"初步尋找答案\">初步尋找答案</h1>\n<h2 id=\"f長度為0的空白？\">%f長度為0的空白？</h2>\n<p>經過<a href=\"https://stackoverflow.com/questions/28334435/stm32-printf-float-variable\">爬文</a>了解，搭配硬體浮點運算器需要printf float ，需要在<strong>LINKER_FLAGS</strong> 加上<code>-u _printf_float</code> ，這樣才可以正常解出float的字串。</p>\n<h2 id=\"hardfault\">Hardfault?</h2>\n<p>即便已經加上<code>_printf_float</code> ，在task內 <code>printf %f</code> 還是會遇到死當的問題，也是爬文發現有網友去trace break point，發現進入hard fault。</p>\n<p>經過交叉測試發現在專案開始還沒帶起OS context switch的時候就先使用一次 <code>print %f,</code> 這樣就不會在task內列印%f時發生hard fault。</p>\n<p>原因暫時還不知道，還要追追看斷點或者爬文，找到後在更新上來。</p>\n<h2 id=\"stacksize-過小\">stacksize 過小?</h2>\n<p>根據網友討論的解法，無限增加stack size的深度就可以避免這個問題，但這個真的是最佳解法嘛？</p>\n<p>經過實測確實初步可以減少當機機率，但是因為動態記憶體的使用因素，可能會隨著列印 float 數字不同產生當機的現象，而且我也有開個很誇張的 stack size = 4096 * 4 byte，它乾脆不努力了直接不輸出也沒進入error callback。</p>\n<h2 id=\"事實\">事實</h2>\n<p> *<em>這些手段都實做了還是會當機， 記憶體永遠都不夠用的，也不建議無限亂開\n*</em> </p>\n<h1 id=\"解決方法\">解決方法</h1>\n<p>根據<a href=\"https://blog.csdn.net/tao475824827/article/details/107477724\">爬文</a>網友結果，有幾種作法</p>\n<h3 id=\"自己刻printf\">自己刻printf</h3>\n<p>想辦法自己刻出printf的功能，不要使用stdio內的這些function。</p>\n<h3 id=\"針對molloc修改stm-cube產出的程式\">針對molloc修改stm cube產出的程式</h3>\n<p>把malloc改成FreeRTOS原生pvPortMalloc，但printf需要realloc()這邊沒有提供，可能也會失敗。</p>\n<p><a href=\"http://www.openrtos.net/FreeRTOS_Support_Forum_Archive/December_2016/freertos_sprintf_f_corrupts_stack_8fbac97dj.html\">出處</a></p>\n<h3 id=\"使用newlib-的patch-修正這個問題\">使用NewLib 的patch 修正這個問題</h3>\n<p>爬文 <a href=\"https://blog.csdn.net/tao475824827/article/details/107477724\">1</a> ,<a href=\"https://github.com/DRNadler/FreeRTOS_helpers\">2</a> ,<a href=\"https://nadler.com/embedded/newlibAndFreeRTOS.html\">3</a>發現其實 ST CubeMx產出的專案確實在官方論壇已經被證實，並且官方UI產出程式底板之前就可以選用NewLib來解決這個問題。</p>\n<p>如果你跟我一樣不喜歡使用autotool 產生 makefile 來管理專案的話，這邊提供最簡單導入NewLib的作法：</p>\n<ol>\n<li>抓heap_useNewlib_ST.c丟到FreeRTOS的資料夾</li>\n<li>makefile 移除sysmem.c 以及 heap_x.c 這兩個檔</li>\n<li>於FreeRTOSconfig.h 新增以下define <pre><code>#define configUSE_NEWLIB_REENTRANT               1\n#define configISR_STACK_SIZE_WORDS               (0x100) // in WORDS, must be valid constant for GCC assembler</code></pre></li>\n</ol>\n<p>完成後可以發現，不需要誇張加大stak size 也可以輕鬆使用<code>printf %f</code>，並且不會再無預警發生當機事件了。</p>\n<p>太好了又可以繼續開心使用了！</p>\n<h1 id=\"reference\">Reference</h1>\n<ol>\n<li><a href=\"https://seanzhengw.github.io/blog/freertos/2019/05/05/FreeRTOS-Task-Size.html\">https://seanzhengw.github.io/blog/freertos/2019/05/05/FreeRTOS-Task-Size.html</a></li>\n<li><a href=\"https://stackoverflow.com/questions/28334435/stm32-printf-float-variable\">https://stackoverflow.com/questions/28334435/stm32-printf-float-variable</a></li>\n<li><a href=\"https://blog.csdn.net/tao475824827/article/details/107477724\">https://blog.csdn.net/tao475824827/article/details/107477724</a></li>\n<li><a href=\"http://www.openrtos.net/FreeRTOS_Support_Forum_Archive/December_2016/freertos_sprintf_f_corrupts_stack_8fbac97dj.html\">http://www.openrtos.net/FreeRTOS_Support_Forum_Archive/December_2016/freertos_sprintf_f_corrupts_stack_8fbac97dj.html</a></li>\n<li><a href=\"https://blog.csdn.net/tao475824827/article/details/107477724\">https://blog.csdn.net/tao475824827/article/details/107477724</a></li>\n<li><a href=\"https://github.com/DRNadler/FreeRTOS_helpers\">https://github.com/DRNadler/FreeRTOS_helpers</a></li>\n<li><a href=\"https://nadler.com/embedded/newlibAndFreeRTOS.html\">https://nadler.com/embedded/newlibAndFreeRTOS.html</a></li>\n</ol>\n",
            "author": {
                "name": "Kenny Chan"
            },
            "tags": [
                   "STM32"
            ],
            "date_published": "2021-03-12T15:56:48+08:00",
            "date_modified": "2021-11-24T09:59:35+08:00"
        },
        {
            "id": "https://labujuice.github.io/my_blog/gitlab-runner-2.html",
            "url": "https://labujuice.github.io/my_blog/gitlab-runner-2.html",
            "title": "Gitlab-Runner 安裝",
            "summary": "CI/CD 這啥？全名Continuous integration/Continuous Deployment， 字義上來看就是持續整合持續部署， 舉個栗子：程式寫完有個打工小弟自動幫你做一次編譯接著將你的專案燒錄到你的目標裝置檢查整個過程中會不會有出現非預期的情況。 用了版本管控之後，如果是一人獨自使用，那也許不大會遇到問題，除非自己有許多台電腦交互使用，可能會發生多人混戰時常看到的漏檔案事件。這時候肯定是哀聲四起，除了將自己新寫的東西stash起來，或者複製一份到別的地方再慢慢整合再一起，最後還不小心失敗，相信大家都很有經驗了。 如果有了CI Server 每一筆push commit 都做檢查，是不是就不會讓大家抓到缺少檔案的專案？ 或者是 亂寫編譯不過關打壞的專案？ 這樣還不夠，如果每一個專案的參與者都把自己要開發的部分切出branch獨立開ㄈ 等到確定沒問題的時候在merge回去master這樣不是更單純嗎？不過關的人永遠不會上master 這個branch，也省下了退版與修正的工了。 這個GitLab runner 需要搭配的是 Gitlab的版本控制server，一般來說官方的免費repo就搭配Gitlab-Runner進行CI了，所以第一步是要確定你是使用Gitlab進行版控的。 安裝這東西主要分兩種途徑，直接下載安裝 or 懶惰鬼script安裝 到這邊找你需要的版本，直接下載下來安裝。 或者打以下的指令進行下載 curl -LJO &quot;https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_${arch}.deb&quot;安裝dpkg -i gitlab-runner_&lt;arch&gt;.deb懶人script安裝也有發現網友不知從那挖到的懶人script apt 安裝大法 curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bashsudo apt-get install gitlab-runner這樣就可以直接使用apt對gitlab-runner進行管理了。 直接執行 gitlab-runner -v&hellip;",
            "content_html": "<h1 id=\"cicd-這啥？\">CI/CD 這啥？</h1>\n<p>全名Continuous integration/Continuous Deployment， 字義上來看就是持續整合持續部署， 舉個栗子：程式寫完有個打工小弟自動幫你做一次編譯接著將你的專案燒錄到你的目標裝置檢查整個過程中會不會有出現非預期的情況。</p>\n<h2 id=\"可以幹嘛？？\">可以幹嘛？？</h2>\n<p>用了版本管控之後，如果是一人獨自使用，那也許不大會遇到問題，除非自己有許多台電腦交互使用，可能會發生多人混戰時常看到的漏檔案事件。\n這時候肯定是哀聲四起，除了將自己新寫的東西stash起來，或者複製一份到別的地方再慢慢整合再一起，最後還不小心失敗，相信大家都很有經驗了。</p>\n<p>如果有了CI Server 每一筆push commit 都做檢查，是不是就不會讓大家抓到缺少檔案的專案？ 或者是 亂寫編譯不過關打壞的專案？</p>\n<h2 id=\"有啥好處？\">有啥好處？</h2>\n<p>這樣還不夠，如果每一個專案的參與者都把自己要開發的部分切出branch獨立開ㄈ 等到確定沒問題的時候在merge回去master這樣不是更單純嗎？不過關的人永遠不會上master 這個branch，也省下了退版與修正的工了。</p>\n<h1 id=\"如何開始？\">如何開始？</h1>\n<h2 id=\"gitlab\">Gitlab</h2>\n<p>這個GitLab runner 需要搭配的是 Gitlab的版本控制server，一般來說官方的免費repo就搭配Gitlab-Runner進行CI了，所以第一步是要確定你是使用Gitlab進行版控的。</p>\n<h2 id=\"gitlab-runner-安裝\">Gitlab-Runner 安裝</h2>\n<p>安裝這東西主要分兩種途徑，<strong>直接下載安裝</strong> or <strong>懶惰鬼script安裝</strong></p>\n<h3 id=\"直接下載安裝\">直接下載安裝</h3>\n<h4 id=\"下載\">下載</h4>\n<p>到<a href=\"https://gitlab-runner-downloads.s3.amazonaws.com/latest/index.html\">這邊</a>找你需要的版本，直接下載下來安裝。</p>\n<p>或者打以下的指令進行下載</p>\n<pre><code>curl -LJO &quot;https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_${arch}.deb&quot;</code></pre><h4 id=\"安裝\">安裝</h4>\n<pre><code>dpkg -i gitlab-runner_&lt;arch&gt;.deb</code></pre><h3 id=\"懶人script安裝\">懶人script安裝</h3>\n<p>也有發現網友不知從那挖到的懶人script apt 安裝大法</p>\n<pre><code>curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bash\nsudo apt-get install gitlab-runner</code></pre><p>這樣就可以直接使用apt對gitlab-runner進行管理了。</p>\n<h3 id=\"檢查是否安裝成功\">檢查是否安裝成功</h3>\n<p>直接執行 <code>gitlab-runner -v</code> 看看有沒有執行到就知道有沒有安裝成功了，有的話應該要有以下訊息 :</p>\n<pre><code>Version:      13.9.0\nGit revision: 2ebc4dc4\nGit branch:   13-9-stable\nGO version:   go1.13.8\nBuilt:        2021-02-22T20:17:08+0000\nOS/Arch:      linux/amd64</code></pre><h2 id=\"系統配置\">系統配置</h2>\n<p>安裝完成後，我們會希望這個CI server以後開機起來可以自己執行，並且可以自己執行任務，根據Gitlab-runner的設計，它自動帶起的功能是透過sudo去執行的，並且會去讀取系統root內的設定檔。如果不使用sudo執行，則是判斷為user mode，這應該是用來做人工帶起測試使用的，設定檔會被存在user底下的document內。</p>\n<p>根據我的需求我需要這一台電腦未來開機連上server後就隨時等待處理被派發的任務了，因此需要進行權限的設置。 網路上有很多網友不同的設定方式，我這邊以最簡單的設定為主。</p>\n<h3 id=\"權限設置\">權限設置</h3>\n<p>先進行<code>Gitlab-runner</code>的權限設定</p>\n<pre><code>sudo chmod + x / usr/bin/gitlab - runner</code></pre><h3 id=\"開機自動開啟服務\">開機自動開啟服務</h3>\n<p>還沒寫QQ </p>\n<p>sudo systemctl enable /etc/systemd/system/gitlab-runner.service</p>\n<h1 id=\"references\">References</h1>\n<p><a href=\"https://docs.gitlab.com/runner/install/linux-manually.html\">https://docs.gitlab.com/runner/install/linux-manually.html</a>\n<a href=\"https://ithelp.ithome.com.tw/articles/10218938\">https://ithelp.ithome.com.tw/articles/10218938</a>\n<a href=\"https://docs.gitlab.com/runner/configuration/init.html\">https://docs.gitlab.com/runner/configuration/init.html</a></p>\n",
            "author": {
                "name": "Kenny Chan"
            },
            "tags": [
                   "Git"
            ],
            "date_published": "2021-03-09T23:44:13+08:00",
            "date_modified": "2021-03-15T11:49:22+08:00"
        },
        {
            "id": "https://labujuice.github.io/my_blog/docker-3-shi-yongcontainer.html",
            "url": "https://labujuice.github.io/my_blog/docker-3-shi-yongcontainer.html",
            "title": "Docker 3 use container to compile",
            "summary": "Container 到底要怎麼用呢執行指令得到image後，我們可以透過docker run &lt;image name&gt; &lt;CMD&gt; 執行，被開起來的image稱為container，但是按照上面的指令開下去很快就離開了，例如： image run ubuntu echo hi 。 原因是container的存在是需要精神糧食的，必須要有程式不斷在執行或者是背景有個service在運作，而最簡單讓他活在當下的作法就是讓他前景執行終端機 docker run -it ubuntu ，這樣子就會讓這個container一直存在著，可以開另外一個terminal執行 docker ps 應該可以看到他一直在執行中。 因此如果我需要這個container一直在背景活著怎麼做呢？ while [TRUE]; do echo QQ; sleep 1; done這時候每隔一秒鐘就會印一次QQ，藉此讓這個程式一直活著。 這是看到許多網友的作法，但我覺的不太好。直接讓這個container用交互背景模式下去跑 docker run -id ubuntu這時候會回一堆亂數字後就退出，但是利用 docker ps 是可以發現這個container確實在背景執行著。背景執行指令如果要在背景執行的contianer執行一些指令，則是 docker exec &lt;container name&gt; &lt;cmd&gt;離開contianer直接砍掉在背景執行的container等於在前景執行 exit，手法是&hellip;",
            "content_html": "<h2 id=\"container-到底要怎麼用呢\">Container 到底要怎麼用呢</h2>\n<h3 id=\"執行指令\">執行指令</h3>\n<p>得到image後，我們可以透過<code>docker run &lt;image name&gt; &lt;CMD&gt;</code> 執行，被開起來的image稱為container，但是按照上面的指令開下去很快就離開了，例如： <code>image run ubuntu echo hi</code> 。</p>\n<h3 id=\"前景執行\">前景執行</h3>\n<p>原因是container的存在是需要精神糧食的，必須要有程式不斷在執行或者是背景有個service在運作，而最簡單讓他活在當下的作法就是讓他前景執行終端機 <code>docker run -it ubuntu</code> ，這樣子就會讓這個container一直存在著，可以開另外一個terminal執行 <code>docker ps</code> 應該可以看到他一直在執行中。</p>\n<h3 id=\"背景執行\">背景執行</h3>\n<p>因此如果我需要這個container一直在背景活著怎麼做呢？ </p>\n<ol>\n<li>可以寫一個垃圾script讓他一直執行著不會出來，example：<pre><code>while [TRUE]; do echo QQ; sleep 1; done</code></pre>這時候每隔一秒鐘就會印一次QQ，藉此讓這個程式一直活著。  這是看到許多網友的作法，但我覺的不太好。</li>\n<li>直接讓這個container用交互背景模式下去跑 <pre><code>docker run -id ubuntu</code></pre>這時候會回一堆亂數字後就退出，但是利用 <code>docker ps</code> 是可以發現這個container確實在背景執行著。</li>\n</ol>\n<h3 id=\"背景執行指令\">背景執行指令</h3>\n<p>如果要在背景執行的contianer執行一些指令，則是</p>\n<pre><code>docker exec &lt;container name&gt; &lt;cmd&gt;</code></pre><h3 id=\"離開contianer\">離開contianer</h3>\n<p>直接砍掉在背景執行的container等於在前景執行 <code>exit</code>，手法是</p>\n<pre><code>docker kill &lt;container name&gt;</code></pre><h2 id=\"映射資料夾\">映射資料夾</h2>\n<p>這功能主要是將電腦內的資料夾掛載入container內，讓container內也可以撈到外面的資料夾，其指令為 </p>\n<pre><code>docker run -v &lt;LocalPath&gt;:&lt;ContainerPath&gt; &lt;image&gt; &lt;CMD&gt;</code></pre><p>這邊可以任意找開個資料夾做測試</p>\n<pre><code>cd Desktop\nmkdir LayerOne\ncd LayerOne\nmkdir LayerTwo_1\nmkdir LayerTwo_2\nmkdir LayerTwo_3\n\ndocker run -v $PWD:/home/Desktop -w /home/Desktop -it ubuntu</code></pre><p><code>-w &lt;default path&gt;</code> 進入container的目錄位置。</p>\n<p>進入之後<code>ls</code> 可以發現那三個資料夾出現在container內，接著試試看 <code>rm -r *</code> 可以發現在container內已經把三個資料夾砍掉了，最後<code>exit</code> 退出回到原本電腦目錄中，可以發現那三個資料夾確實也被砍掉了，證實了這個資料夾映射確實是可以雙向共用的。</p>\n<h2 id=\"範例\">範例</h2>\n<p>這邊舉一個範例是透過container進行編譯的動作：</p>\n<pre><code>cd /tmp/\ngit clone https://github.com/Labujuice/LimitSpeedCalculator\ncd LimitSpeedCalculator/Quadrotor/\n\ndocker run -v $PWD:/home/workspace -w /home/workspace kennycym/ubuntu_2004_arm_gcc_2018q2 make; ./out</code></pre><p>這個範例將下載下來的專案放入container內編譯之後在裡面執行後退出，另外一種玩法是先進入container之後在自行補上編譯與執行的指令。</p>\n<pre><code>cd /tmp/\ngit clone https://github.com/Labujuice/LimitSpeedCalculator\ncd LimitSpeedCalculator/Quadrotor/\n\ndocker run -v $PWD:/home/workspace -w /home/workspace -it kennycym/ubuntu_2004_arm_gcc_2018q2 \n\nmake\n./out</code></pre><p>可以透過一些 <code>rm</code> <code>make clean</code> 等指令交互做一些比較，應該就是這麼樣一回事了。</p>\n<h2 id=\"references\">References</h2>\n<ol>\n<li><a href=\"https://docs.docker.com/engine/reference/run/\">Docker Docs : Docker run reference</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/exec/\">Docker Docs : docker exec</a></li>\n<li><a href=\"https://newtoypia.blogspot.com/2017/02/docker.html\">Docker 新手第二課： 前景/背景/收工休息 圖解狀態轉換</a></li>\n<li><a href=\"https://www.runoob.com/docker/docker-run-command.html\">Docker run 命令</a></li>\n</ol>\n",
            "author": {
                "name": "Kenny Chan"
            },
            "tags": [
                   "Docker"
            ],
            "date_published": "2021-03-04T16:51:10+08:00",
            "date_modified": "2021-03-10T23:16:42+08:00"
        },
        {
            "id": "https://labujuice.github.io/my_blog/docker-2-zhuan-xie-dockerfile.html",
            "url": "https://labujuice.github.io/my_blog/docker-2-zhuan-xie-dockerfile.html",
            "title": "Docker 2 撰寫 Dockerfile",
            "summary": "這是幹麻的？Docker 在我的應用是要拿來用在CI Server 上 Build code 以及做一些簡單的 unit-test，而現實的狀況是 空白的 ubuntu img 內是沒有安裝任何的 gcc, g++, gcc-arm-none-eabi, gtest 等，因此我會希望每次CI開始跑開 contiainer 就可以有這樣的環境縮短每次開始做編譯的環境架設之時間。 同理，如果單純只是想要架設一個環境來玩，玩壞了又可以再生，也是可以透過這樣的手法建立docker img，只是這一篇是以建立編譯環境作為範例而已。 先介紹幾個最基本的要素，要製作一個image檔案需要做的事情 FROM 告知你要使用那一個image來製作 LABEL 標籤，可以留下你的姓名跟電話還有想說的廢話， 例如: LABEL maintainer=&quot;kenny chan &lt;kennycym@gmail.com&gt;&quot;LABEL Description=&quot;Image for building gcc, g++, arm-gcc project.&quot;WORKDIR 執行RUN, CMD, ENTRYPOINT, COPY and ADD 的目錄&hellip;",
            "content_html": "<h2 id=\"這是幹麻的？\">這是幹麻的？</h2>\n<p>Docker 在我的應用是要拿來用在CI Server 上 Build code 以及做一些簡單的 unit-test，而現實的狀況是 空白的 ubuntu img 內是沒有安裝任何的 gcc, g++, gcc-arm-none-eabi, gtest 等，因此我會希望每次CI開始跑開 contiainer 就可以有這樣的環境縮短每次開始做編譯的環境架設之時間。</p>\n<p>同理，如果單純只是想要架設一個環境來玩，玩壞了又可以再生，也是可以透過這樣的手法建立docker img，只是這一篇是以建立編譯環境作為範例而已。</p>\n<h2 id=\"dockerfile-常用基本指令\">Dockerfile 常用基本指令</h2>\n<p>先介紹幾個最基本的要素，要製作一個image檔案需要做的事情</p>\n<p><code>FROM</code> 告知你要使用那一個image來製作</p>\n<p><code>LABEL</code> 標籤，可以留下你的姓名跟電話還有想說的廢話， 例如:</p>\n<pre><code>LABEL maintainer=&quot;kenny chan &lt;kennycym@gmail.com&gt;&quot;\nLABEL Description=&quot;Image for building gcc, g++, arm-gcc project.&quot;</code></pre><p><code>WORKDIR</code> 執行RUN, CMD, ENTRYPOINT, COPY and ADD 的目錄</p>\n<p><code>ADD</code> 將檔案或者資料夾加入 contaner </p>\n<p><code>RUN</code> 執行指令，像是平常在terminal內打的指令一樣。</p>\n<p><code>ENV</code> 進行一些環境相關的設定，或者變數的宣告等。</p>\n<h2 id=\"一個範例\">一個範例</h2>\n<p>以我最常用的 gcc, g++, gcc-arm-none-eabi, git 製作一個dockerfile，在這個檔案開始進行之前，要先去下載我指定的gcc-arm-none-eabi 2018q2版本，並且將他放在同樣的目錄之下。</p>\n<p>不知道上那下載可以<a href=\"https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads\">點我下載</a>，如果想更換為喜歡的版本也行，就是要在修改一下檔名跟路徑。</p>\n<pre><code>FROM ubuntu:20.04\nLABEL maintainer=&quot;kenny chan &lt;kennycym@gmail.com&gt;&quot;\nLABEL Description=&quot;Image for building gcc, g++, arm-gcc project.&quot;\nWORKDIR /work\n\nADD . /work\n\n# Install any needed packages specified in requirements.txt\nRUN apt-get update &amp;&amp; \\\n    apt-get upgrade -y &amp;&amp; \\\n    apt-get install -y \\\n# Development files\n      rsync \\\n      gcc \\\n      build-essential \\\n      git \\\n      bzip2 \\\n      wget &amp;&amp; \\\n    apt-get clean\nRUN tar jxvf gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2\n\nENV PATH &quot;/work/gcc-arm-none-eabi-7-2018-q2-update/bin:$PATH&quot;\n</code></pre><p>鵝～其實這個範例是修改自<a href=\"https://hub.docker.com/r/stronglytyped/arm-none-eabi-gcc/dockerfile\">這裡</a>的。</p>\n<h2 id=\"build-docker-img\">Build Docker Img</h2>\n<p>完成後我們可以先看一下目前目錄下有哪些東西</p>\n<pre><code>$ ls\ndockerfile  gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2</code></pre><p>確認有這兩樣東西後，接著執行 </p>\n<pre><code>docker build -t ubuntu_gcc_arm_gcc . --no-cache</code></pre><p>這邊有些可說明的，加入<code>-t</code> 可以指定輸出的image ，如果要輸出至兩個或以上就直接 <code>-t image1 -t image2 ,...</code> ， 如果要指定dockerfile 則是<code>-f path/dockerfilename</code> 這樣的手法達成，但不指定就是預設當前目錄下的dockerfile。</p>\n<p>後面加上 <code>--no-cache</code> 則會讓每次build都不會cache住先前的資料，雖然比較慢，但是中間失誤的機會會比較少一些。 (當然熟練的話就不需要這樣子了)</p>\n<p>完成後可以使用<code>docker images</code> 來看看是否已經存在，他的長相應該會是這樣子：</p>\n<pre><code>REPOSITORY                            TAG       IMAGE ID       CREATED        SIZE\nubuntu_gcc_arm_gcc                    latest    1b40dcef2857   20 hours ago   921MB\nubuntu                                20.04     f63181f19b2f   6 weeks ago    72.9MB\nubuntu                                latest    f63181f19b2f   6 weeks ago    72.9MB</code></pre><p>可以發現 <code>ubuntu_gcc_arm_gcc</code> 是存在的。</p>\n<h2 id=\"確認系統環境\">確認系統環境</h2>\n<p>完成後我們可以執行該image</p>\n<pre><code>docker run -it ubuntu_gcc_arm_gcc</code></pre><p>執行後應該可以進去該container的控制界面，那我們就來敲敲看各個編譯器的版本號吧！\n<code>gcc -v</code>  <code>g++ -v</code> <code>arm-none-eabi-gcc -v</code></p>\n<p>應該要得到的結果是：</p>\n<p><strong>gcc</strong></p>\n<p><code>gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)</code></p>\n<p><strong>g++</strong></p>\n<p><code>gcc version 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] (GNU Tools for Arm Embedded Processors 7-2018-q2-update)</code></p>\n<p><strong>arm-none-eabi-gcc</strong></p>\n<p><code>gcc version 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] (GNU Tools for Arm Embedded Processors 7-2018-q2-update)</code></p>\n<h2 id=\"references\">References</h2>\n<ol>\n<li><a href=\"https://docs.docker.com/engine/reference/builder/\">Docker Docs: Dockerfile reference</a></li>\n<li><a href=\"https://hub.docker.com/r/stronglytyped/arm-none-eabi-gcc/dockerfile\">Docker Hub : stronglytyped/arm-none-eabi-gcc\n</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/users/20103456/ironman/1320\">用30天來介紹和使用 Docker 系列</a></li>\n</ol>\n",
            "author": {
                "name": "Kenny Chan"
            },
            "tags": [
                   "Docker"
            ],
            "date_published": "2021-03-03T09:58:08+08:00",
            "date_modified": "2021-03-04T15:16:34+08:00"
        },
        {
            "id": "https://labujuice.github.io/my_blog/docker-1-installatio.html",
            "url": "https://labujuice.github.io/my_blog/docker-1-installatio.html",
            "title": "Docker 1 安裝",
            "summary": "為啥需要Docker?由於近期開發的專案需要導入在Gitlab上開啟CI/CD的功能，在這之前需要先架設一台GitLab Runner，但是在一台Runner上面如果同時針對很多專案去做檢查是需要把這台SERVER的環境設置成所有專案都相容的，安裝起來相當費工夫，並且可能會在過程中發生不幸的事情。 這時候Docker的好處就展現出來了，可以輕易達成在一個SERVER上面同時滿足： 其實上網搜尋已經有很多前人的足跡，在此就不再次撰寫這篇章，不外乎就是看看Docker官方的教學文件以及上網看看前人們學習的動機與方法。 查閱Docker Docs 網頁[1]可以發現 ubuntu 安裝頁面下面有一個 現成的Shell script，直接下載執行，就可以作到最懶人的安裝方式。 curl -fsSL https://get.docker.com -o get-docker.sh sudo sh get-docker.sh另一方法則是參考其他前輩根據官網教學的指令所撰寫好的Script[2]: sudo apt-get remove -y docker docker-engine docker.io containerd runc; \\sudo apt-get update &amp;&amp; \\sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common &amp;&amp; \\curl -fsSL https://download.docker.com/linux/ubuntu/gpg&hellip;",
            "content_html": "<h1 id=\"為啥需要docker\">為啥需要Docker?</h1>\n<p>由於近期開發的專案需要導入在Gitlab上開啟CI/CD的功能，在這之前需要先架設一台GitLab Runner，但是在一台Runner上面如果同時針對很多專案去做檢查是需要把這台SERVER的環境設置成所有專案都相容的，安裝起來相當費工夫，並且可能會在過程中發生不幸的事情。</p>\n<p>這時候Docker的好處就展現出來了，可以輕易達成在一個SERVER上面同時滿足：</p>\n<ol>\n<li>多種編譯環境</li>\n<li>相互隔離</li>\n<li>玩爛了不必重新安裝系統(不污染原系統)</li>\n<li>可攜帶、可複製</li>\n</ol>\n<h1 id=\"如何開始第一步\">如何開始第一步?</h1>\n<p>其實上網搜尋已經有很多前人的足跡，在此就不再次撰寫這篇章，不外乎就是看看Docker官方的教學文件以及上網看看前人們學習的動機與方法。</p>\n<h1 id=\"安裝懶人指令\">安裝懶人指令?</h1>\n<p>查閱Docker Docs 網頁[1]可以發現 ubuntu 安裝頁面下面有一個 現成的Shell script，直接下載執行，就可以作到最懶人的安裝方式。</p>\n<pre><code> curl -fsSL https://get.docker.com -o get-docker.sh\n sudo sh get-docker.sh</code></pre><p>另一方法則是參考其他前輩根據官網教學的指令所撰寫好的Script[2]:</p>\n<pre><code>sudo apt-get remove -y docker docker-engine docker.io containerd runc; \\\nsudo apt-get update &amp;&amp; \\\nsudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common &amp;&amp; \\\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - &amp;&amp; \\\nsudo add-apt-repository \\\n   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable&quot; &amp;&amp; \\\nsudo apt-get update &amp;&amp; \\\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io</code></pre><h1 id=\"確認已經裝好？\">確認已經裝好？</h1>\n<p>如果已經正確安裝可以執行<code>docker</code> 來確定是否已經安裝完成，但是礙於權限應該沒辦法正確執行，故執行以下指令將docker設置為每個使用者都可以執行的權限。</p>\n<pre><code>sudo usermod -aG docker &lt;your-user&gt;</code></pre><p>接著登出在登入應該就可以正常執行，並且可以透過 <code>docker -v</code>確認目前安裝之版本號。</p>\n<h1 id=\"references\">References</h1>\n<ol>\n<li><a href=\"https://docs.docker.com/\">Docker Docs</a></li>\n<li><a href=\"https://caloskao.org/install-docker-on-ubuntu-20-04-focal-fossa/\">https://caloskao.org/install-docker-on-ubuntu-20-04-focal-fossa/</a></li>\n</ol>\n",
            "author": {
                "name": "Kenny Chan"
            },
            "tags": [
                   "Docker"
            ],
            "date_published": "2021-03-03T09:47:44+08:00",
            "date_modified": "2021-03-04T13:47:36+08:00"
        }
    ]
}
