<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Kenny&#x27;s Blog</title>
    <link href="https://labujuice.github.io/my_blog/feed.xml" rel="self" />
    <link href="https://labujuice.github.io/my_blog" />
    <updated>2022-06-08T00:30:04+08:00</updated>
    <author>
        <name>Kenny Chan</name>
    </author>
    <id>https://labujuice.github.io/my_blog</id>

    <entry>
        <title>gstreamer rtsp server </title>
        <author>
            <name>Kenny Chan</name>
        </author>
        <link href="https://labujuice.github.io/my_blog/gstreamer-2.html"/>
        <id>https://labujuice.github.io/my_blog/gstreamer-2.html</id>
            <category term="未分類筆記"/>

        <updated>2022-06-08T00:30:04+08:00</updated>
            <summary>
                <![CDATA[
                    緣由因為一些工作上的需求, 需要在小電腦上建立rtsp server, 並且將接上的相機所取得之影像打上server… 因為打流這件事情是門外漢, 經過我目前所蒐集到的方法得到兩種不同的路徑: 在GitHub找到一個純RTSP Server的專案: rtsp-simple-server , 該專案有提供docker版本可以直接讓大家去clone下來使用. docker run --rm -it -e RTSP_PROTOCOLS=tcp -p 8554:8554 -p 1935:1935 -p 8888:8888 aler9/rtsp-simple-server方法二 使用Gstreamer rtsp server直接開server環境準備install dependenciessudo apt-get install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-toolsclone gst-rtsp-servergit clone https://github.com/GStreamer/gst-rtsp-server.gitbuild examplecd examples/gcc test-launch.c -o&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="緣由">緣由</h3>
<p>因為一些工作上的需求, 需要在小電腦上建立rtsp server, 並且將接上的相機所取得之影像打上server…</p>
<h3 id="實現方法">實現方法</h3>
<p>因為打流這件事情是門外漢, 經過我目前所蒐集到的方法得到兩種不同的路徑:</p>
<ol>
<li>建立純RTSP SERVER在Local端, 並且使用ffmpeg or gstreamer push上去, 遠端的裝置就可以到這個RTSP SERVER捉取資料。</li>
<li>使用 GStreamer 的 gst-rtsp-server 進行簡易的抓影像開server的動作。</li>
</ol>
<h3 id="方法一-建立pure-rtsp-server">方法一 建立Pure RTSP SERVER</h3>
<p>在GitHub找到一個純RTSP Server的專案: <a href="https://github.com/aler9/rtsp-simple-server">rtsp-simple-server</a> , 該專案有提供docker版本可以直接讓大家去clone下來使用.</p>
<pre><code class="language-bash">docker run --rm -it -e RTSP_PROTOCOLS=tcp -p 8554:8554 -p 1935:1935 -p 8888:8888 aler9/rtsp-simple-server</code></pre>
<h3 id="方法二-使用gstreamer-rtsp-server直接開server">方法二 使用Gstreamer rtsp server直接開server</h3>
<h4 id="環境準備">環境準備</h4>
<ol>
<li><strong>install dependencies</strong><pre><code class="language-bash">sudo apt-get install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools</code></pre>
</li>
<li><strong>clone gst-rtsp-server</strong><pre><code class="language-bash">git clone https://github.com/GStreamer/gst-rtsp-server.git</code></pre>
</li>
<li><strong>build example</strong><pre><code class="language-bash">cd examples/
gcc test-launch.c -o test-launch $(pkg-config --cflags --libs gstreamer-rtsp-server-1.0)</code></pre>
</li>
</ol>
<h3 id="references">References</h3>
<ol>
<li><a href="https://tw511.com/a/01/32066.html">https://tw511.com/a/01/32066.html</a></li>
<li><a href="https://github.com/aler9/rtsp-simple-server">https://github.com/aler9/rtsp-simple-server</a></li>
</ol>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Docker Commit function</title>
        <author>
            <name>Kenny Chan</name>
        </author>
        <link href="https://labujuice.github.io/my_blog/docker-commit-function.html"/>
        <id>https://labujuice.github.io/my_blog/docker-commit-function.html</id>
            <category term="Docker"/>

        <updated>2021-11-25T16:39:27+08:00</updated>
            <summary>
                <![CDATA[
                    用途先前使用過 dockerfile的方式來建立image檔, 但是以平時使用電腦環境的情境來說, 個人是比較喜歡使用指令的方式一個一個安裝東西或者做相關的設定(因為不是常常在重灌電腦), 但這樣安裝之後, 在container被關閉之後就消失了, 所作的更動也不會被留下來, 這樣該怎麼辦呢？ 那就使用 docker commit吧! 指令說明： docker commit -m &quot;COMMIT MSG HERE&quot; -a &quot;AUTHOR NAME&quot; CONTAINER_ID CONTAINER_NAME簡易範例： docker commit -m &quot;install tkinter&quot; -a &quot;Kenny.chan&quot; 8e08b10e3005 ubuntu:18.04 
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="用途">用途</h2>
<p>先前使用過 dockerfile的方式來建立image檔, 但是以平時使用電腦環境的情境來說, 個人是比較喜歡使用指令的方式一個一個安裝東西或者做相關的設定(因為不是常常在重灌電腦), 但這樣安裝之後, 在container被關閉之後就消失了, 所作的更動也不會被留下來, 這樣該怎麼辦呢？  </p>
<p>那就使用 <code>docker commit</code>吧!</p>
<h2 id="簡易指令筆記">簡易指令筆記</h2>
<p>指令說明：</p>
<pre><code>docker commit -m &quot;COMMIT MSG HERE&quot; -a &quot;AUTHOR NAME&quot; CONTAINER_ID CONTAINER_NAME</code></pre><p>簡易範例：</p>
<pre><code>docker commit -m &quot;install tkinter&quot; -a &quot;Kenny.chan&quot; 8e08b10e3005 ubuntu:18.04 </code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Pyinstaller安裝與使用</title>
        <author>
            <name>Kenny Chan</name>
        </author>
        <link href="https://labujuice.github.io/my_blog/gpyinstaller-an-zhuang-yu-shi-yong.html"/>
        <id>https://labujuice.github.io/my_blog/gpyinstaller-an-zhuang-yu-shi-yong.html</id>
            <category term="python"/>

        <updated>2021-11-25T16:31:08+08:00</updated>
            <summary>
                <![CDATA[
                    Installationpip or pip3: pip3 install pyinstaller阿如果沒有PIP這邊複習一下pip安裝方法: apt -&gt; sudo apt install python3-pip , pip下來之後可能還需要更新-&gt; pip3 install --upgrade pip 完整打包指令 pyinstaller -F -w -c --clean target.py如果想要加上圖片則加上 --icon=thisisicon.ico注意事項沒有安裝完所有所需的套件一樣可以被打包成執行檔, 但是執行起來馬上會當掉完整打包會變得很肥, 如果說目標裝置已經有python以及其相關鎖需要的module, 則不一定需要完整打包
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="installation">Installation</h2>
<p>pip or pip3:  </p>
<pre><code>pip3 install pyinstaller</code></pre><p>阿如果沒有PIP這邊複習一下pip安裝方法:<br>apt -&gt; <code>sudo apt install python3-pip</code>  , pip下來之後可能還需要更新-&gt; <code>pip3 install --upgrade pip</code></p>
<h2 id="pyinstaller-usage">Pyinstaller usage</h2>
<p>完整打包指令</p>
<pre><code>pyinstaller -F -w -c --clean target.py</code></pre><p>如果想要加上圖片則加上 <code>--icon=thisisicon.ico</code></p>
<h2 id="注意事項">注意事項</h2>
<ol>
<li>沒有安裝完所有所需的套件一樣可以被打包成執行檔, 但是執行起來馬上會當掉</li>
<li>完整打包會變得很肥, 如果說目標裝置已經有python以及其相關鎖需要的module, 則不一定需要完整打包</li>
</ol>

            ]]>
        </content>
    </entry>
    <entry>
        <title>以Docker模擬arm ubuntu</title>
        <author>
            <name>Kenny Chan</name>
        </author>
        <link href="https://labujuice.github.io/my_blog/yidocker-mo-niarm-ubuntu.html"/>
        <id>https://labujuice.github.io/my_blog/yidocker-mo-niarm-ubuntu.html</id>
            <category term="Docker"/>

        <updated>2021-11-25T16:14:12+08:00</updated>
            <summary>
                <![CDATA[
                    Docker image參考 https://hub.docker.com/r/arm64v8/ubuntu/ 可以以以下指令將 該image pull下來 docker pull arm64v8/ubuntu:18.04Run以前景執行進行測試 docker run -it arm64v8/ubuntu:18.04得到了以下error WARNING: The requested image&#39;s platform (linux/arm64/v8) does not match the detected host platform (linux/amd64) and no specific platform was requestedstandard_init_linux.go:228: exec user process caused: exec format error 安裝qemu用於環景模擬： sudo apt install qemu-user-staticBack&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="docker-image">Docker image</h2>
<p>參考 <a href="https://hub.docker.com/r/arm64v8/ubuntu/">https://hub.docker.com/r/arm64v8/ubuntu/</a> 可以以以下指令將 該image pull下來  </p>
<pre><code>docker pull arm64v8/ubuntu:18.04</code></pre><h2 id="run">Run</h2>
<p>以前景執行進行測試</p>
<pre><code>docker run -it arm64v8/ubuntu:18.04</code></pre><p>得到了以下error <code>WARNING: The requested image&#39;s platform (linux/arm64/v8) does not match the detected host platform (linux/amd64) and no specific platform was requested
standard_init_linux.go:228: exec user process caused: exec format error</code></p>
<h2 id="排除問題">排除問題</h2>
<p>安裝qemu用於環景模擬：</p>
<pre><code>sudo apt install qemu-user-static</code></pre><p>Back to Run and enjoy~</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Submodule with Gitlab CI/CD</title>
        <author>
            <name>Kenny Chan</name>
        </author>
        <link href="https://labujuice.github.io/my_blog/submodule-with-gitlab-cicd.html"/>
        <id>https://labujuice.github.io/my_blog/submodule-with-gitlab-cicd.html</id>
            <category term="Git"/>

        <updated>2021-10-10T23:02:41+08:00</updated>
            <summary>
                <![CDATA[
                    話題緣由因為專案需求將部份程式使用Submodule的形式進行包裝, 以方便將這些模組化的程式供應給眾多專案使用, 降低相同程式維護的成本… 但不幸的事情發生了, 原先已經將這些程式打整包的, 使用gitlab-ci進行編譯與跑測試腳本, 在加入Submodule之後就沒辦法正確拉到該submodule內的東西, 接著就發生了 Runner 回報fail的狀況. 經過谷歌大神以及Gitlab的說明文件解釋, 大致可以將解決方向整理出來： [submodule &quot;project-x&quot;]path = project-xurl = https://gitserver.com/group/project-x.git #url = ../../group/project-x.git #SSHpath: 這個模組要放置的路徑, url: 這個模組本來的路徑.修改gitlab-ci.yml 內的variables的設定variables:GIT_SUBMODULE_STRATEGY: recursive #can bet set to normal or recursive理論上完成以下兩項 Runner就應該要可以正常拉到 Submodule的檔案並且正確執行，但天底下就是有這麼一個意外….. 如果是私人專案或者是封閉的git server該如何呢？ 我所碰到的例外情境是封閉環境下的GitServer並且非Public專案, 使用Http的方法無法正確拉到submodule的檔案. 回想一下前面我們製作Runner的時候, 其實是使用Key的方式進行認證, 而SSH通道的使用也必須要先有Key才可以開通, 所以我第一時間想到的是既然是這樣「那應該也是走SSH吧？」…. 沒錯,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="話題緣由">話題緣由</h2>
<p>因為專案需求將部份程式使用Submodule的形式進行包裝, 以方便將這些模組化的程式供應給眾多專案使用, 降低相同程式維護的成本…  </p>
<p>但不幸的事情發生了, 原先已經將這些程式打整包的, 使用gitlab-ci進行編譯與跑測試腳本, 在加入Submodule之後就沒辦法正確拉到該submodule內的東西, 接著就發生了 Runner 回報fail的狀況.</p>
<h2 id="解決方法">解決方法</h2>
<p>經過谷歌大神以及Gitlab的說明文件解釋, 大致可以將解決方向整理出來：</p>
<ol>
<li>確定 <code>.gitmodules</code> 的設定正確, 以下來自gitlab的範例說明了新增 submodule的方法<pre><code>[submodule &quot;project-x&quot;]
path = project-x
url = https://gitserver.com/group/project-x.git
 #url = ../../group/project-x.git #SSH</code></pre>path: 這個模組要放置的路徑, url: 這個模組本來的路徑.</li>
<li>修改<code>gitlab-ci.yml</code> 內的<code>variables</code>的設定<pre><code>variables:
GIT_SUBMODULE_STRATEGY: recursive  #can bet set to normal or recursive</code></pre></li>
</ol>
<hr>
<p>理論上完成以下兩項 Runner就應該要可以正常拉到 Submodule的檔案並且正確執行，但天底下就是有這麼一個意外….. 如果是私人專案或者是封閉的git server該如何呢？</p>
<h2 id="例外情境">例外情境</h2>
<p>我所碰到的例外情境是封閉環境下的GitServer並且非Public專案, 使用Http的方法無法正確拉到submodule的檔案.<br>回想一下前面我們製作Runner的時候, 其實是使用Key的方式進行認證, 而SSH通道的使用也必須要先有Key才可以開通, 所以我第一時間想到的是既然是這樣「<strong>那應該也是走SSH吧？</strong>」….  </p>
<p>沒錯, 這種情況下確實就是<strong>走ssh</strong>了….</p>
<hr>
<p>例外題： <strong>那不同server 又是非public專案該如何呢？</strong> 這點還沒碰到過待實做, 如果有結果會在貼上來。</p>
<h2 id="referencies">Referencies</h2>
<ol>
<li><a href="https://docs.gitlab.com/ee/ci/git_submodules.html">Gitlab Submodule with Gitlab CI/CD</a></li>
</ol>

            ]]>
        </content>
    </entry>
    <entry>
        <title>以雙磁鐵取代磁鐵圈</title>
        <author>
            <name>Kenny Chan</name>
        </author>
        <link href="https://labujuice.github.io/my_blog/yi-shuang-ci-tie-qu-dai-ci-tie-quan.html"/>
        <id>https://labujuice.github.io/my_blog/yi-shuang-ci-tie-qu-dai-ci-tie-quan.html</id>
            <category term="Magpylib"/>

        <updated>2021-04-28T00:37:37+08:00</updated>
            <summary>
                <![CDATA[
                    緣由製作音量大小聲的旋鈕，過去大部份的設計都使用可變電阻進行製作，藉由改變可變電阻阻值大小進而量測到不同的分電壓，藉由分壓改變量來決定要增加多少音量或者減少多少音量，以達成細調的功能。 可變電阻有一個很大的問題，隨著環境不同，溫度、濕度、壓力等都會影響他的飄移範圍與可靠度，長期在濕度較高的環境甚至會導致可變電阻接觸面氧化，造成音量亂跳、忽大忽小等狀況，近而影響使用者的體驗。 我們的好朋友磁鐵＋磁力ＥＮＣＯＤＥＲ可以取代可變電阻達成藉由轉動所產生變化調整音量大小的任務，成本上甚至比一些高階精密可變電阻來得低。 磁力ＥＮＣＯＤＥＲ需要的磁鐵強度通常會給一個範圍，要貼的夠近才可以正確感應。 這時候產生了一些問題： 基本上最佳的設計應該是使用足夠大小的磁環確保磁場均勻，固定上也比單磁鐵黏在中間來得好加工處理，但是磁環大部分是特殊規格， 在元件的取得上比常見的磁鐵尺寸規格難，並且需要負擔開模加工的費用。 這時候其實不必太擔心，根據磁力學磁場會封閉磁力線的特性，可以使用磁鐵串接的方式來達成類似的目的，並且中間依然是空心的狀態，又可以量到想要的磁力大小，怎麼達成呢？我們用 magpylib來進行模擬。 假設我們需求旋鈕底座給的深度只有2mm，中間孔洞直徑 D = 10mm ，上網找現成的銣鐵棚磁鐵，以我的範例來說我找到的磁鐵是 1mm*4mm*2mm，這時候我就得去計算到底10mm間隔下以磁鐵上緣與兩側磁鐵中心點做量測，要串接幾個磁鐵才可以達到一般ＥＮＣＯＤＥＲ需要的30~50mT。 以我上方寫的磁鐵撰寫的範例 做為參考 import numpy as npimport matplotlib.pyplot as pltfrom magpylib.source.magnet import Box,Cylinderfrom magpylib import Collection, displaySystem#distance between magnetsdis = 10# magnet size and field mag_size_x = 1mag_size_y = 4mag_size_z =&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="緣由">緣由</h2>
<p>製作音量大小聲的旋鈕，過去大部份的設計都使用<strong>可變電阻</strong>進行製作，藉由改變可變電阻阻值大小進而量測到不同的分電壓，藉由分壓改變量來決定要增加多少音量或者減少多少音量，以達成細調的功能。  </p>
<p>可變電阻有一個很大的問題，隨著環境不同，溫度、濕度、壓力等都會影響他的飄移範圍與可靠度，長期在濕度較高的環境甚至會導致可變電阻接觸面氧化，造成音量亂跳、忽大忽小等狀況，近而影響使用者的體驗。  </p>
<h2 id="解法">解法</h2>
<p>我們的好朋友磁鐵＋磁力ＥＮＣＯＤＥＲ可以取代可變電阻達成藉由轉動所產生變化調整音量大小的任務，成本上甚至比一些高階精密可變電阻來得低。</p>
<h2 id="可是瑞凡，磁鐵哪來？">可是瑞凡，磁鐵哪來？</h2>
<p>磁力ＥＮＣＯＤＥＲ需要的磁鐵強度通常會給一個範圍，要貼的夠近才可以正確感應。<br>這時候產生了一些問題：  </p>
<ol>
<li>磁鐵尺寸不一強度材質都會影響結果。</li>
<li>如果想要整體設計薄一點，那是不是使用磁鐵圈比較好？</li>
<li>磁鐵開模費用，模具費用、製作時程、產量價格？</li>
</ol>
<p>基本上最佳的設計應該是使用<strong>足夠大小的磁環</strong>確保磁場均勻，固定上也比單磁鐵黏在中間來得好加工處理，但是磁環大部分是特殊規格， 在元件的取得上比常見的磁鐵尺寸規格難，並且需要負擔開模加工的費用。  </p>
<p>這時候其實不必太擔心，根據磁力學磁場會封閉磁力線的特性，可以使用磁鐵串接的方式來達成類似的目的，並且中間依然是空心的狀態，又可以量到想要的磁力大小，怎麼達成呢？我們用 magpylib來進行模擬。</p>
<h2 id="模擬">模擬</h2>
<p>假設我們需求旋鈕底座給的深度只有<code>2mm</code>，中間孔洞直徑 <code>D = 10mm</code> ，上網找現成的銣鐵棚磁鐵，以我的範例來說我找到的磁鐵是 <code>1mm*4mm*2mm</code>，這時候我就得去計算到底10mm間隔下以磁鐵上緣與兩側磁鐵中心點做量測，要串接幾個磁鐵才可以達到一般ＥＮＣＯＤＥＲ需要的30~50mT。</p>
<p>以我上方寫的磁鐵撰寫的<a href="https://github.com/Labujuice/Learn_magpylib/tree/main/5_Two%20magnet%20and%20field">範例</a>  做為參考</p>
<pre><code class="language-python">import numpy as np
import matplotlib.pyplot as plt
from magpylib.source.magnet import Box,Cylinder
from magpylib import Collection, displaySystem

#distance between magnets
dis = 10

# magnet size and field 
mag_size_x = 1
mag_size_y = 4
mag_size_z = 2

mag_field_x = 1300
mag_field_y = 0
mag_field_z = 0

pos_x = (dis + mag_size_x/2*2)/2
pos_z = - mag_size_z/2

# create magnets 這邊設定磁鐵上緣靠著z=0這平面,注意: pos是以磁鐵中心為主
sL = Box(mag=(mag_field_x,mag_field_y,mag_field_z), dim=(mag_size_x,mag_size_y,mag_size_z), pos=(-pos_x,0,pos_z))
sL_1 = Box(mag=(mag_field_x,mag_field_y,mag_field_z), dim=(mag_size_x,mag_size_y,mag_size_z), pos=(-pos_x,0,pos_z))
sL_2 = Box(mag=(mag_field_x,mag_field_y,mag_field_z), dim=(mag_size_x,mag_size_y,mag_size_z), pos=(-pos_x,0,pos_z))
sR = Box(mag=(mag_field_x,mag_field_y,mag_field_z), dim=(mag_size_x,mag_size_y,mag_size_z), pos=(pos_x,0,pos_z))
sR_1 = Box(mag=(mag_field_x,mag_field_y,mag_field_z), dim=(mag_size_x,mag_size_y,mag_size_z), pos=(pos_x,0,pos_z))
sR_2 = Box(mag=(mag_field_x,mag_field_y,mag_field_z), dim=(mag_size_x,mag_size_y,mag_size_z), pos=(pos_x,0,pos_z))

#move copy bos
sL_1.move((-mag_size_x,0,0))
sR_1.move((mag_size_x,0,0))
sL_2.move((-2*mag_size_x,0,0))
sR_2.move((2*mag_size_x,0,0))

# create collection
c = Collection(sL,sL_1,sL_2,sR,sR_1,sR_2)

# calculate B-field on a grid
xs = np.linspace(-10,10,33)
zs = np.linspace(-10,10,44)
POS = np.array([(x,0,z) for z in zs for x in xs])
Bs = c.getB(POS).reshape(44,33,3)     #&lt;--VECTORIZED

# create figure
fig = plt.figure(figsize=(9,5))
ax1 = fig.add_subplot(121, projection=&#39;3d&#39;)  # 3D-axis
ax2 = fig.add_subplot(122)                   # 2D-axis

# display system geometry on ax1
displaySystem(c, subplotAx=ax1, suppress=True)

# display field in xz-plane using matplotlib
X,Z = np.meshgrid(xs,zs)
U,V = Bs[:,:,0], Bs[:,:,2]
ax2.streamplot(X, Z, U, V, color=np.log(U**2+V**2))

print(c.getB([0,0,0]))

plt.show()</code></pre>
<p>最後可以算出來在<code>0,0,0·</code>座標可以得到32.9mT的剩磁，故這樣的設計是可以用的。</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>利用Magpylib模擬磁鐵</title>
        <author>
            <name>Kenny Chan</name>
        </author>
        <link href="https://labujuice.github.io/my_blog/li-yongmagpylib.html"/>
        <id>https://labujuice.github.io/my_blog/li-yongmagpylib.html</id>
            <category term="Magpylib"/>

        <updated>2021-04-28T00:37:44+08:00</updated>
            <summary>
                <![CDATA[
                    Sources第一個範例先了解怎麼創造磁鐵，基本的磁鐵模組在magpylib.source.magnet內主要分成三種不同的形式存在： 以上這幾種不同形式的磁鐵物件，需要做一些基本的設定才可以變成一個磁鐵： 透過說明書可以了解 magpylib.source.magnet 除了可以定義磁鐵的型態與規格外，同時也可以做某位置下的磁場強度這件事情，這邊留下一筆範例作為筆記： from magpylib.source.magnet import Box, Cylinder, Sphere# Simuate a N38 5 * 5 *5 mm #https://www.leeyed.com/rare_earth_magnet.htmls_Box = Box(mag=(0,0,1220), dim=(5,5,5), pos=(0,0,-2.5))s_Cylinder = Cylinder(mag=(0, 0, 1220), dim=(5, 5), pos=(0.0, 0.0, -2.5), angle=0.0, axis=(0.0, 0.0, 1.0), iterDia=50)s_Sphere = Sphere(mag=(0.0, 0.0, 1220), dim=5.0, pos=(0.0, 0.0,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="sources">Sources</h1>
<p>第一個範例先了解怎麼創造磁鐵，基本的磁鐵模組在<code>magpylib.source.magnet</code>內主要分成三種不同的形式存在：  </p>
<ul>
<li>Box<br>magpylib.source.magnet.Box(mag=(0.0, 0.0, 0.0), dim=(0.0, 0.0, 0.0), pos=(0.0, 0.0, 0.0), angle=0.0, axis=(0.0, 0.0, 1.0))</li>
<li>Cylinder<br>magpylib.source.magnet.Cylinder(mag=(0.0, 0.0, 0.0), dim=(0.0, 0.0), pos=(0.0, 0.0, 0.0), angle=0.0, axis=(0.0, 0.0, 1.0), iterDia=50)</li>
<li>Sphere<br>magpylib.source.magnet.Sphere(mag=(0.0, 0.0, 0.0), dim=0.0, pos=(0.0, 0.0, 0.0), angle=0.0, axis=(0.0, 0.0, 1.0))</li>
</ul>
<p>以上這幾種不同形式的磁鐵物件，需要做一些基本的設定才可以變成一個磁鐵：  </p>
<ul>
<li>Mag:<br>鐵強度，這邊就是定義磁鐵的Remanence Br剩磁，是用來表示磁場強度的，單位則是常見的 mT ，當然如果今天是知道高斯也可以，做個單位轉換就可以解決了。方向有正負號，可以設定充磁方向 與 根據磁鐵設定剩磁大小。</li>
<li>Dim:<br>Dimension的意思，根據不同形式的磁鐵有不同的設定方式， box-&gt;長,寬,高、Cylinder-&gt;直徑,高度、Sphere-&gt;直徑。單位mm。</li>
<li>Pos:<br>表示位置，這個是指磁鐵物件的中心座標位置，如果設定0,0,0則是在origin的地方作為磁鐵中心的意思，單位mm。</li>
<li>Angle:<br>轉動的角度，單位deg。</li>
<li>Axis:<br>轉軸向量。</li>
</ul>
<h1 id="取得磁場強度">取得磁場強度</h1>
<p>透過說明書可以了解 <code>magpylib.source.magnet</code> 除了可以定義磁鐵的型態與規格外，同時也可以做某位置下的磁場強度這件事情，這邊留下一筆<a href="https://github.com/Labujuice/Learn_magpylib/blob/main/1_magnet%20simulation/mag_box.py">範例</a>作為筆記：</p>
<pre><code class="language-python">from magpylib.source.magnet import Box, Cylinder, Sphere

# Simuate a N38 5 * 5 *5 mm 
#https://www.leeyed.com/rare_earth_magnet.html
s_Box = Box(mag=(0,0,1220), dim=(5,5,5), pos=(0,0,-2.5))
s_Cylinder = Cylinder(mag=(0, 0, 1220), dim=(5, 5), pos=(0.0, 0.0, -2.5), angle=0.0, axis=(0.0, 0.0, 1.0), iterDia=50)
s_Sphere = Sphere(mag=(0.0, 0.0, 1220), dim=5.0, pos=(0.0, 0.0, -2.5), angle=0.0, axis=(0.0, 0.0, 1.0))

print(s_Box.getB([0,0,5]))
print(s_Cylinder.getB([0,0,5]))
print(s_Sphere.getB([0,0,5]))</code></pre>
<p>根據這個範例，可以透過<code>getB(x,y,z)</code>取得該做標下的磁場強度，這樣就可以當作我們設計磁鐵大小或者距離。</p>
<h1 id="實際應用的範例">實際應用的範例</h1>
<ol>
<li>透過單軸磁力senosr感應磁鐵的距離做按鈕、滑軌等應用。</li>
<li>模擬馬達定轉子磁鐵產生的磁場需要多少距離可以當作沒有干擾。</li>
<li>模擬磁力encoder製作旋鈕需要的磁鐵距離。</li>
<li>模擬防盜門窗上磁鐵與感應器的距離。</li>
<li>掃地機器人感應軟性磁鐵作為柵欄的功能。</li>
</ol>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Magpylib 基本介紹與安裝</title>
        <author>
            <name>Kenny Chan</name>
        </author>
        <link href="https://labujuice.github.io/my_blog/magpylib-an-zhuang.html"/>
        <id>https://labujuice.github.io/my_blog/magpylib-an-zhuang.html</id>
            <category term="Magpylib"/>

        <updated>2021-04-28T00:37:52+08:00</updated>
            <summary>
                <![CDATA[
                    緣由因為專案開發有使用到磁鐵與磁力感測器，對於磁場單位與使用情境相當陌生的我就開始在網路上尋找做磁路模擬與分析的工具，無奈找到大部分的工具都是搭配像是Solidworks這種套裝軟體的plug-in，或者是matlab這類專業的數值軟體的套件。 對於崇尚使用免費公開並且只要有根據並且87%成效以上的我來說實在是口味不符，只好更大力地在網上衝浪，很幸運的找到 Magpylib 這套 python3的module。 根據官方文件說明了解，這個模組安裝輕量、使用便利，基本上可以少量的資源完成一些簡單的三圍磁場模擬，例如： 當然他也有一些限制： 根據個人的喜好，還是留下pip的安裝方式好了。 安裝的方式相當簡單，在 Linux and MacOS底下都是使用以下指令進行安裝： pip3 install magpylib其他的就留到下一篇吧，想睡了。 Magpylib document Magpylib Github
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="緣由">緣由</h1>
<p>因為專案開發有使用到磁鐵與磁力感測器，對於磁場單位與使用情境相當陌生的我就開始在網路上尋找做磁路模擬與分析的工具，無奈找到大部分的工具都是搭配像是Solidworks這種套裝軟體的plug-in，或者是matlab這類專業的數值軟體的套件。<br>對於崇尚使用免費公開並且只要有根據並且87%成效以上的我來說實在是口味不符，只好更大力地在網上衝浪，很幸運的找到 Magpylib 這套 python3的module。</p>
<h1 id="magpylib-可以幹啥？">Magpylib 可以幹啥？</h1>
<p>根據官方文件說明了解，這個模組安裝輕量、使用便利，基本上可以少量的資源完成一些簡單的三圍磁場模擬，例如：  </p>
<ol>
<li>模擬立方體磁鐵圓形磁鐵產生的磁場向量。</li>
<li>導線電流所產生的磁場向量</li>
<li>可以模擬 磁矩 (magnetic moments) <a href="https://en.wikipedia.org/wiki/Magnetic_moment">wikipedia</a></li>
</ol>
<p>當然他也有一些限制：  </p>
<ol>
<li>對於磁場必須要基本的概念與了解<br>對Br的認知、對使用環境的限制等，關係到模擬與實際的差異</li>
<li>不能害怕寫一些簡單的python 程式<br>用Matlab也是得寫一些程式，用其他繪圖軟體也得繪圖＋設定參數，寫程式很基本的</li>
<li>magnetic shields or transformer cores 是模擬不出來的<br>Shielding 就不談了，這套軟體模擬不出，另外 transformer cores 關係到內部矽鋼片使用的好壞，這一套也是模擬不出來的。</li>
</ol>
<h1 id="安裝">安裝</h1>
<p>根據個人的喜好，還是留下pip的安裝方式好了。<br>安裝的方式相當簡單，在 Linux and MacOS底下都是使用以下指令進行安裝：  </p>
<pre><code>pip3 install magpylib</code></pre><p>其他的就留到下一篇吧，想睡了。</p>
<h1 id="references">References</h1>
<p><a href="https://magpylib.readthedocs.io/">Magpylib document</a></p>
<p><a href="https://github.com/magpylib/magpylib">Magpylib Github</a></p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Stm32 FreeRTOS Printf %f issue</title>
        <author>
            <name>Kenny Chan</name>
        </author>
        <link href="https://labujuice.github.io/my_blog/stm32-freertos-printf-f-issue.html"/>
        <id>https://labujuice.github.io/my_blog/stm32-freertos-printf-f-issue.html</id>
            <category term="STM32"/>

        <updated>2021-11-24T09:59:35+08:00</updated>
            <summary>
                <![CDATA[
                    故事的起源stm32 使用Cube 生成之專案在使用printf列印%f的時候發現printf %f 轉出長度為0的字串。 經過爬文了解，搭配硬體浮點運算器需要printf float ，需要在LINKER_FLAGS 加上-u _printf_float ，這樣才可以正常解出float的字串。 即便已經加上_printf_float ，在task內 printf %f 還是會遇到死當的問題，也是爬文發現有網友去trace break point，發現進入hard fault。 經過交叉測試發現在專案開始還沒帶起OS context switch的時候就先使用一次 print %f, 這樣就不會在task內列印%f時發生hard fault。 原因暫時還不知道，還要追追看斷點或者爬文，找到後在更新上來。 根據網友討論的解法，無限增加stack size的深度就可以避免這個問題，但這個真的是最佳解法嘛？ 經過實測確實初步可以減少當機機率，但是因為動態記憶體的使用因素，可能會隨著列印 float 數字不同產生當機的現象，而且我也有開個很誇張的 stack size = 4096 * 4 byte，它乾脆不努力了直接不輸出也沒進入error callback。 *這些手段都實做了還是會當機， 記憶體永遠都不夠用的，也不建議無限亂開* 根據爬文網友結果，有幾種作法 想辦法自己刻出printf的功能，不要使用stdio內的這些function。 把malloc改成FreeRTOS原生pvPortMalloc，但printf需要realloc()這邊沒有提供，可能也會失敗。&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="故事的起源">故事的起源</h1>
<p>stm32 使用Cube 生成之專案在使用<code>printf</code>列印<code>%f</code>的時候發現<code>printf</code>  <code>%f</code> 轉出長度為0的字串。</p>
<h1 id="初步尋找答案">初步尋找答案</h1>
<h2 id="f長度為0的空白？">%f長度為0的空白？</h2>
<p>經過<a href="https://stackoverflow.com/questions/28334435/stm32-printf-float-variable">爬文</a>了解，搭配硬體浮點運算器需要printf float ，需要在<strong>LINKER_FLAGS</strong> 加上<code>-u _printf_float</code> ，這樣才可以正常解出float的字串。</p>
<h2 id="hardfault">Hardfault?</h2>
<p>即便已經加上<code>_printf_float</code> ，在task內 <code>printf %f</code> 還是會遇到死當的問題，也是爬文發現有網友去trace break point，發現進入hard fault。</p>
<p>經過交叉測試發現在專案開始還沒帶起OS context switch的時候就先使用一次 <code>print %f,</code> 這樣就不會在task內列印%f時發生hard fault。</p>
<p>原因暫時還不知道，還要追追看斷點或者爬文，找到後在更新上來。</p>
<h2 id="stacksize-過小">stacksize 過小?</h2>
<p>根據網友討論的解法，無限增加stack size的深度就可以避免這個問題，但這個真的是最佳解法嘛？</p>
<p>經過實測確實初步可以減少當機機率，但是因為動態記憶體的使用因素，可能會隨著列印 float 數字不同產生當機的現象，而且我也有開個很誇張的 stack size = 4096 * 4 byte，它乾脆不努力了直接不輸出也沒進入error callback。</p>
<h2 id="事實">事實</h2>
<p> *<em>這些手段都實做了還是會當機， 記憶體永遠都不夠用的，也不建議無限亂開
*</em> </p>
<h1 id="解決方法">解決方法</h1>
<p>根據<a href="https://blog.csdn.net/tao475824827/article/details/107477724">爬文</a>網友結果，有幾種作法</p>
<h3 id="自己刻printf">自己刻printf</h3>
<p>想辦法自己刻出printf的功能，不要使用stdio內的這些function。</p>
<h3 id="針對molloc修改stm-cube產出的程式">針對molloc修改stm cube產出的程式</h3>
<p>把malloc改成FreeRTOS原生pvPortMalloc，但printf需要realloc()這邊沒有提供，可能也會失敗。</p>
<p><a href="http://www.openrtos.net/FreeRTOS_Support_Forum_Archive/December_2016/freertos_sprintf_f_corrupts_stack_8fbac97dj.html">出處</a></p>
<h3 id="使用newlib-的patch-修正這個問題">使用NewLib 的patch 修正這個問題</h3>
<p>爬文 <a href="https://blog.csdn.net/tao475824827/article/details/107477724">1</a> ,<a href="https://github.com/DRNadler/FreeRTOS_helpers">2</a> ,<a href="https://nadler.com/embedded/newlibAndFreeRTOS.html">3</a>發現其實 ST CubeMx產出的專案確實在官方論壇已經被證實，並且官方UI產出程式底板之前就可以選用NewLib來解決這個問題。</p>
<p>如果你跟我一樣不喜歡使用autotool 產生 makefile 來管理專案的話，這邊提供最簡單導入NewLib的作法：</p>
<ol>
<li>抓heap_useNewlib_ST.c丟到FreeRTOS的資料夾</li>
<li>makefile 移除sysmem.c 以及 heap_x.c 這兩個檔</li>
<li>於FreeRTOSconfig.h 新增以下define <pre><code>#define configUSE_NEWLIB_REENTRANT               1
#define configISR_STACK_SIZE_WORDS               (0x100) // in WORDS, must be valid constant for GCC assembler</code></pre></li>
</ol>
<p>完成後可以發現，不需要誇張加大stak size 也可以輕鬆使用<code>printf %f</code>，並且不會再無預警發生當機事件了。</p>
<p>太好了又可以繼續開心使用了！</p>
<h1 id="reference">Reference</h1>
<ol>
<li><a href="https://seanzhengw.github.io/blog/freertos/2019/05/05/FreeRTOS-Task-Size.html">https://seanzhengw.github.io/blog/freertos/2019/05/05/FreeRTOS-Task-Size.html</a></li>
<li><a href="https://stackoverflow.com/questions/28334435/stm32-printf-float-variable">https://stackoverflow.com/questions/28334435/stm32-printf-float-variable</a></li>
<li><a href="https://blog.csdn.net/tao475824827/article/details/107477724">https://blog.csdn.net/tao475824827/article/details/107477724</a></li>
<li><a href="http://www.openrtos.net/FreeRTOS_Support_Forum_Archive/December_2016/freertos_sprintf_f_corrupts_stack_8fbac97dj.html">http://www.openrtos.net/FreeRTOS_Support_Forum_Archive/December_2016/freertos_sprintf_f_corrupts_stack_8fbac97dj.html</a></li>
<li><a href="https://blog.csdn.net/tao475824827/article/details/107477724">https://blog.csdn.net/tao475824827/article/details/107477724</a></li>
<li><a href="https://github.com/DRNadler/FreeRTOS_helpers">https://github.com/DRNadler/FreeRTOS_helpers</a></li>
<li><a href="https://nadler.com/embedded/newlibAndFreeRTOS.html">https://nadler.com/embedded/newlibAndFreeRTOS.html</a></li>
</ol>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Gitlab-Runner 安裝</title>
        <author>
            <name>Kenny Chan</name>
        </author>
        <link href="https://labujuice.github.io/my_blog/gitlab-runner-2.html"/>
        <id>https://labujuice.github.io/my_blog/gitlab-runner-2.html</id>
            <category term="Git"/>

        <updated>2021-03-15T11:49:22+08:00</updated>
            <summary>
                <![CDATA[
                    CI/CD 這啥？全名Continuous integration/Continuous Deployment， 字義上來看就是持續整合持續部署， 舉個栗子：程式寫完有個打工小弟自動幫你做一次編譯接著將你的專案燒錄到你的目標裝置檢查整個過程中會不會有出現非預期的情況。 用了版本管控之後，如果是一人獨自使用，那也許不大會遇到問題，除非自己有許多台電腦交互使用，可能會發生多人混戰時常看到的漏檔案事件。這時候肯定是哀聲四起，除了將自己新寫的東西stash起來，或者複製一份到別的地方再慢慢整合再一起，最後還不小心失敗，相信大家都很有經驗了。 如果有了CI Server 每一筆push commit 都做檢查，是不是就不會讓大家抓到缺少檔案的專案？ 或者是 亂寫編譯不過關打壞的專案？ 這樣還不夠，如果每一個專案的參與者都把自己要開發的部分切出branch獨立開ㄈ 等到確定沒問題的時候在merge回去master這樣不是更單純嗎？不過關的人永遠不會上master 這個branch，也省下了退版與修正的工了。 這個GitLab runner 需要搭配的是 Gitlab的版本控制server，一般來說官方的免費repo就搭配Gitlab-Runner進行CI了，所以第一步是要確定你是使用Gitlab進行版控的。 安裝這東西主要分兩種途徑，直接下載安裝 or 懶惰鬼script安裝 到這邊找你需要的版本，直接下載下來安裝。 或者打以下的指令進行下載 curl -LJO &quot;https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_${arch}.deb&quot;安裝dpkg -i gitlab-runner_&lt;arch&gt;.deb懶人script安裝也有發現網友不知從那挖到的懶人script apt 安裝大法 curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bashsudo apt-get install gitlab-runner這樣就可以直接使用apt對gitlab-runner進行管理了。 直接執行 gitlab-runner -v&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="cicd-這啥？">CI/CD 這啥？</h1>
<p>全名Continuous integration/Continuous Deployment， 字義上來看就是持續整合持續部署， 舉個栗子：程式寫完有個打工小弟自動幫你做一次編譯接著將你的專案燒錄到你的目標裝置檢查整個過程中會不會有出現非預期的情況。</p>
<h2 id="可以幹嘛？？">可以幹嘛？？</h2>
<p>用了版本管控之後，如果是一人獨自使用，那也許不大會遇到問題，除非自己有許多台電腦交互使用，可能會發生多人混戰時常看到的漏檔案事件。
這時候肯定是哀聲四起，除了將自己新寫的東西stash起來，或者複製一份到別的地方再慢慢整合再一起，最後還不小心失敗，相信大家都很有經驗了。</p>
<p>如果有了CI Server 每一筆push commit 都做檢查，是不是就不會讓大家抓到缺少檔案的專案？ 或者是 亂寫編譯不過關打壞的專案？</p>
<h2 id="有啥好處？">有啥好處？</h2>
<p>這樣還不夠，如果每一個專案的參與者都把自己要開發的部分切出branch獨立開ㄈ 等到確定沒問題的時候在merge回去master這樣不是更單純嗎？不過關的人永遠不會上master 這個branch，也省下了退版與修正的工了。</p>
<h1 id="如何開始？">如何開始？</h1>
<h2 id="gitlab">Gitlab</h2>
<p>這個GitLab runner 需要搭配的是 Gitlab的版本控制server，一般來說官方的免費repo就搭配Gitlab-Runner進行CI了，所以第一步是要確定你是使用Gitlab進行版控的。</p>
<h2 id="gitlab-runner-安裝">Gitlab-Runner 安裝</h2>
<p>安裝這東西主要分兩種途徑，<strong>直接下載安裝</strong> or <strong>懶惰鬼script安裝</strong></p>
<h3 id="直接下載安裝">直接下載安裝</h3>
<h4 id="下載">下載</h4>
<p>到<a href="https://gitlab-runner-downloads.s3.amazonaws.com/latest/index.html">這邊</a>找你需要的版本，直接下載下來安裝。</p>
<p>或者打以下的指令進行下載</p>
<pre><code>curl -LJO &quot;https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_${arch}.deb&quot;</code></pre><h4 id="安裝">安裝</h4>
<pre><code>dpkg -i gitlab-runner_&lt;arch&gt;.deb</code></pre><h3 id="懶人script安裝">懶人script安裝</h3>
<p>也有發現網友不知從那挖到的懶人script apt 安裝大法</p>
<pre><code>curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bash
sudo apt-get install gitlab-runner</code></pre><p>這樣就可以直接使用apt對gitlab-runner進行管理了。</p>
<h3 id="檢查是否安裝成功">檢查是否安裝成功</h3>
<p>直接執行 <code>gitlab-runner -v</code> 看看有沒有執行到就知道有沒有安裝成功了，有的話應該要有以下訊息 :</p>
<pre><code>Version:      13.9.0
Git revision: 2ebc4dc4
Git branch:   13-9-stable
GO version:   go1.13.8
Built:        2021-02-22T20:17:08+0000
OS/Arch:      linux/amd64</code></pre><h2 id="系統配置">系統配置</h2>
<p>安裝完成後，我們會希望這個CI server以後開機起來可以自己執行，並且可以自己執行任務，根據Gitlab-runner的設計，它自動帶起的功能是透過sudo去執行的，並且會去讀取系統root內的設定檔。如果不使用sudo執行，則是判斷為user mode，這應該是用來做人工帶起測試使用的，設定檔會被存在user底下的document內。</p>
<p>根據我的需求我需要這一台電腦未來開機連上server後就隨時等待處理被派發的任務了，因此需要進行權限的設置。 網路上有很多網友不同的設定方式，我這邊以最簡單的設定為主。</p>
<h3 id="權限設置">權限設置</h3>
<p>先進行<code>Gitlab-runner</code>的權限設定</p>
<pre><code>sudo chmod + x / usr/bin/gitlab - runner</code></pre><h3 id="開機自動開啟服務">開機自動開啟服務</h3>
<p>還沒寫QQ </p>
<p>sudo systemctl enable /etc/systemd/system/gitlab-runner.service</p>
<h1 id="references">References</h1>
<p><a href="https://docs.gitlab.com/runner/install/linux-manually.html">https://docs.gitlab.com/runner/install/linux-manually.html</a>
<a href="https://ithelp.ithome.com.tw/articles/10218938">https://ithelp.ithome.com.tw/articles/10218938</a>
<a href="https://docs.gitlab.com/runner/configuration/init.html">https://docs.gitlab.com/runner/configuration/init.html</a></p>

            ]]>
        </content>
    </entry>
</feed>
