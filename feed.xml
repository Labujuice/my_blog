<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Kenny&#x27;s Blog</title>
    <link href="https://labujuice.github.io/my_blog/feed.xml" rel="self" />
    <link href="https://labujuice.github.io/my_blog" />
    <updated>2021-03-21T15:19:15+08:00</updated>
    <author>
        <name>Kenny Chan</name>
    </author>
    <id>https://labujuice.github.io/my_blog</id>

    <entry>
        <title>利用Magpylib模擬磁鐵</title>
        <author>
            <name>Kenny Chan</name>
        </author>
        <link href="https://labujuice.github.io/my_blog/li-yongmagpylib.html"/>
        <id>https://labujuice.github.io/my_blog/li-yongmagpylib.html</id>
            <category term="未分類筆記"/>

        <updated>2021-03-21T15:19:15+08:00</updated>
            <summary>
                <![CDATA[
                    Sources第一個範例先了解怎麼創造磁鐵，基本的磁鐵模組在magpylib.source.magnet內主要分成三種不同的形式存在： 以上這幾種不同形式的磁鐵物件，需要做一些基本的設定才可以變成一個磁鐵： 透過說明書可以了解 magpylib.source.magnet 除了可以定義磁鐵的型態與規格外，同時也可以做某位置下的磁場強度這件事情，這邊留下一筆範例作為筆記： from magpylib.source.magnet import Box, Cylinder, Sphere# Simuate a N38 5 * 5 *5 mm #https://www.leeyed.com/rare_earth_magnet.htmls_Box = Box(mag=(0,0,1220), dim=(5,5,5), pos=(0,0,-2.5))s_Cylinder = Cylinder(mag=(0, 0, 1220), dim=(5, 5), pos=(0.0, 0.0, -2.5), angle=0.0, axis=(0.0, 0.0, 1.0), iterDia=50)s_Sphere = Sphere(mag=(0.0, 0.0, 1220), dim=5.0, pos=(0.0, 0.0,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="sources">Sources</h1>
<p>第一個範例先了解怎麼創造磁鐵，基本的磁鐵模組在<code>magpylib.source.magnet</code>內主要分成三種不同的形式存在：  </p>
<ul>
<li>Box<br>magpylib.source.magnet.Box(mag=(0.0, 0.0, 0.0), dim=(0.0, 0.0, 0.0), pos=(0.0, 0.0, 0.0), angle=0.0, axis=(0.0, 0.0, 1.0))</li>
<li>Cylinder<br>magpylib.source.magnet.Cylinder(mag=(0.0, 0.0, 0.0), dim=(0.0, 0.0), pos=(0.0, 0.0, 0.0), angle=0.0, axis=(0.0, 0.0, 1.0), iterDia=50)</li>
<li>Sphere<br>magpylib.source.magnet.Sphere(mag=(0.0, 0.0, 0.0), dim=0.0, pos=(0.0, 0.0, 0.0), angle=0.0, axis=(0.0, 0.0, 1.0))</li>
</ul>
<p>以上這幾種不同形式的磁鐵物件，需要做一些基本的設定才可以變成一個磁鐵：  </p>
<ul>
<li>Mag:<br>鐵強度，這邊就是定義磁鐵的Remanence Br剩磁，是用來表示磁場強度的，單位則是常見的 mT ，當然如果今天是知道高斯也可以，做個單位轉換就可以解決了。方向有正負號，可以設定充磁方向 與 根據磁鐵設定剩磁大小。</li>
<li>Dim:<br>Dimension的意思，根據不同形式的磁鐵有不同的設定方式， box-&gt;長,寬,高、Cylinder-&gt;直徑,高度、Sphere-&gt;直徑。單位mm。</li>
<li>Pos:<br>表示位置，這個是指磁鐵物件的中心座標位置，如果設定0,0,0則是在origin的地方作為磁鐵中心的意思，單位mm。</li>
<li>Angle:<br>轉動的角度，單位deg。</li>
<li>Axis:<br>轉軸向量。</li>
</ul>
<h1 id="取得磁場強度">取得磁場強度</h1>
<p>透過說明書可以了解 <code>magpylib.source.magnet</code> 除了可以定義磁鐵的型態與規格外，同時也可以做某位置下的磁場強度這件事情，這邊留下一筆<a href="https://github.com/Labujuice/Learn_magpylib/blob/main/1_magnet%20simulation/mag_box.py">範例</a>作為筆記：</p>
<pre><code>from magpylib.source.magnet import Box, Cylinder, Sphere

# Simuate a N38 5 * 5 *5 mm 
#https://www.leeyed.com/rare_earth_magnet.html
s_Box = Box(mag=(0,0,1220), dim=(5,5,5), pos=(0,0,-2.5))
s_Cylinder = Cylinder(mag=(0, 0, 1220), dim=(5, 5), pos=(0.0, 0.0, -2.5), angle=0.0, axis=(0.0, 0.0, 1.0), iterDia=50)
s_Sphere = Sphere(mag=(0.0, 0.0, 1220), dim=5.0, pos=(0.0, 0.0, -2.5), angle=0.0, axis=(0.0, 0.0, 1.0))

print(s_Box.getB([0,0,5]))
print(s_Cylinder.getB([0,0,5]))
print(s_Sphere.getB([0,0,5]))</code></pre><p>根據這個範例，可以透過<code>getB(x,y,z)</code>取得該做標下的磁場強度，這樣就可以當作我們設計磁鐵大小或者距離。</p>
<h1 id="實際應用的範例">實際應用的範例</h1>
<ol>
<li>透過單軸磁力senosr感應磁鐵的距離做按鈕、滑軌等應用。</li>
<li>模擬馬達定轉子磁鐵產生的磁場需要多少距離可以當作沒有干擾。</li>
<li>模擬磁力encoder製作旋鈕需要的磁鐵距離。</li>
<li>模擬防盜門窗上磁鐵與感應器的距離。</li>
<li>掃地機器人感應軟性磁鐵作為柵欄的功能。</li>
</ol>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Magpylib 基本介紹與安裝</title>
        <author>
            <name>Kenny Chan</name>
        </author>
        <link href="https://labujuice.github.io/my_blog/magpylib-an-zhuang.html"/>
        <id>https://labujuice.github.io/my_blog/magpylib-an-zhuang.html</id>
            <category term="未分類筆記"/>

        <updated>2021-03-21T01:22:56+08:00</updated>
            <summary>
                <![CDATA[
                    緣由因為專案開發有使用到磁鐵與磁力感測器，對於磁場單位與使用情境相當陌生的我就開始在網路上尋找做磁路模擬與分析的工具，無奈找到大部分的工具都是搭配像是Solidworks這種套裝軟體的plug-in，或者是matlab這類專業的數值軟體的套件。 對於崇尚使用免費公開並且只要有根據並且87%成效以上的我來說實在是口味不符，只好更大力地在網上衝浪，很幸運的找到 Magpylib 這套 python3的module。 根據官方文件說明了解，這個模組安裝輕量、使用便利，基本上可以少量的資源完成一些簡單的三圍磁場模擬，例如： 當然他也有一些限制： 根據個人的喜好，還是留下pip的安裝方式好了。 安裝的方式相當簡單，在 Linux and MacOS底下都是使用以下指令進行安裝： pip3 install magpylib其他的就留到下一篇吧，想睡了。 Magpylib document Magpylib Github
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="緣由">緣由</h1>
<p>因為專案開發有使用到磁鐵與磁力感測器，對於磁場單位與使用情境相當陌生的我就開始在網路上尋找做磁路模擬與分析的工具，無奈找到大部分的工具都是搭配像是Solidworks這種套裝軟體的plug-in，或者是matlab這類專業的數值軟體的套件。<br>對於崇尚使用免費公開並且只要有根據並且87%成效以上的我來說實在是口味不符，只好更大力地在網上衝浪，很幸運的找到 Magpylib 這套 python3的module。</p>
<h1 id="magpylib-可以幹啥？">Magpylib 可以幹啥？</h1>
<p>根據官方文件說明了解，這個模組安裝輕量、使用便利，基本上可以少量的資源完成一些簡單的三圍磁場模擬，例如：  </p>
<ol>
<li>模擬立方體磁鐵圓形磁鐵產生的磁場向量。</li>
<li>導線電流所產生的磁場向量</li>
<li>可以模擬 磁矩 (magnetic moments) <a href="https://en.wikipedia.org/wiki/Magnetic_moment">wikipedia</a></li>
</ol>
<p>當然他也有一些限制：  </p>
<ol>
<li>對於磁場必須要基本的概念與了解<br>對Br的認知、對使用環境的限制等，關係到模擬與實際的差異</li>
<li>不能害怕寫一些簡單的python 程式<br>用Matlab也是得寫一些程式，用其他繪圖軟體也得繪圖＋設定參數，寫程式很基本的</li>
<li>magnetic shields or transformer cores 是模擬不出來的<br>Shielding 就不談了，這套軟體模擬不出，另外 transformer cores 關係到內部矽鋼片使用的好壞，這一套也是模擬不出來的。</li>
</ol>
<h1 id="安裝">安裝</h1>
<p>根據個人的喜好，還是留下pip的安裝方式好了。<br>安裝的方式相當簡單，在 Linux and MacOS底下都是使用以下指令進行安裝：  </p>
<pre><code>pip3 install magpylib</code></pre><p>其他的就留到下一篇吧，想睡了。</p>
<h1 id="references">References</h1>
<p><a href="https://magpylib.readthedocs.io/">Magpylib document</a></p>
<p><a href="https://github.com/magpylib/magpylib">Magpylib Github</a></p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Stm32 FreeRTOS Printf %f issue</title>
        <author>
            <name>Kenny Chan</name>
        </author>
        <link href="https://labujuice.github.io/my_blog/stm32-freertos-printf-f-issue.html"/>
        <id>https://labujuice.github.io/my_blog/stm32-freertos-printf-f-issue.html</id>
            <category term="STM32"/>

        <updated>2021-03-15T11:49:26+08:00</updated>
            <summary>
                <![CDATA[
                    故事的起源stm32 使用Cube 生成之專案在使用printf列印%f的時候發現printf %f 轉出長度為0的字串。 經過爬文了解，搭配硬體浮點運算器需要printf float ，需要在LINKER_FLAGS 加上-u _printf_float ，這樣才可以正常解出float的字串。 即便已經加上_printf_float ，在task內 printf %f 還是會遇到死當的問題，也是爬文發現有網友去trace break point，發現進入hard fault。 經過交叉測試發現在專案開始還沒帶起OS context switch的時候就先使用一次 print %f, 這樣就不會在task內列印%f時發生hard fault。 原因暫時還不知道，還要追追看斷點或者爬文，找到後在更新上來。 根據網友討論的解法，無限增加stack size的深度就可以避免這個問題，但這個真的是最佳解法嘛？ 經過實測確實初步可以減少當機機率，但是因為動態記憶體的使用因素，可能會隨著列印 float 數字不同產生當機的現象，而且我也有開個很誇張的 stack size = 4096 * 4 byte，它乾脆不努力了直接不輸出也沒進入error callback。 *這些手段都實做了還是會當機， 記憶體永遠都不夠用的，也不建議無限亂開* 根據爬文網友結果，有幾種作法 想辦法自己刻出printf的功能，不要使用stdio內的這些function。 把malloc改成FreeRTOS原生pvPortMalloc，但printf需要realloc()這邊沒有提供，可能也會失敗。&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="故事的起源">故事的起源</h1>
<p>stm32 使用Cube 生成之專案在使用<code>printf</code>列印<code>%f</code>的時候發現<code>printf</code>  <code>%f</code> 轉出長度為0的字串。</p>
<h1 id="初步尋找答案">初步尋找答案</h1>
<h2 id="f長度為0的空白？">%f長度為0的空白？</h2>
<p>經過<a href="https://stackoverflow.com/questions/28334435/stm32-printf-float-variable">爬文</a>了解，搭配硬體浮點運算器需要printf float ，需要在<strong>LINKER_FLAGS</strong> 加上<code>-u _printf_float</code> ，這樣才可以正常解出float的字串。</p>
<h2 id="hardfault">Hardfault?</h2>
<p>即便已經加上<code>_printf_float</code> ，在task內 <code>printf %f</code> 還是會遇到死當的問題，也是爬文發現有網友去trace break point，發現進入hard fault。</p>
<p>經過交叉測試發現在專案開始還沒帶起OS context switch的時候就先使用一次 <code>print %f,</code> 這樣就不會在task內列印%f時發生hard fault。</p>
<p>原因暫時還不知道，還要追追看斷點或者爬文，找到後在更新上來。</p>
<h2 id="stacksize-過小">stacksize 過小?</h2>
<p>根據網友討論的解法，無限增加stack size的深度就可以避免這個問題，但這個真的是最佳解法嘛？</p>
<p>經過實測確實初步可以減少當機機率，但是因為動態記憶體的使用因素，可能會隨著列印 float 數字不同產生當機的現象，而且我也有開個很誇張的 stack size = 4096 * 4 byte，它乾脆不努力了直接不輸出也沒進入error callback。</p>
<h2 id="事實">事實</h2>
<p> *<em>這些手段都實做了還是會當機， 記憶體永遠都不夠用的，也不建議無限亂開
*</em> </p>
<h1 id="解決方法">解決方法</h1>
<p>根據<a href="https://blog.csdn.net/tao475824827/article/details/107477724">爬文</a>網友結果，有幾種作法</p>
<h3 id="自己刻printf">自己刻printf</h3>
<p>想辦法自己刻出printf的功能，不要使用stdio內的這些function。</p>
<h3 id="針對molloc修改stm-cube產出的程式">針對molloc修改stm cube產出的程式</h3>
<p>把malloc改成FreeRTOS原生pvPortMalloc，但printf需要realloc()這邊沒有提供，可能也會失敗。</p>
<p><a href="http://www.openrtos.net/FreeRTOS_Support_Forum_Archive/December_2016/freertos_sprintf_f_corrupts_stack_8fbac97dj.html">出處</a></p>
<h3 id="使用newlib-的patch-修正這個問題">使用NewLib 的patch 修正這個問題</h3>
<p>爬文 <a href="https://blog.csdn.net/tao475824827/article/details/107477724">1</a> ,<a href="https://github.com/DRNadler/FreeRTOS_helpers">2</a> ,<a href="https://nadler.com/embedded/newlibAndFreeRTOS.html">3</a>發現其實 ST CubeMx產出的專案確實在官方論壇已經被證實，並且官方UI產出程式底板之前就可以選用NewLib來解決這個問題。</p>
<p>如果你跟我一樣不喜歡使用autotool 產生 makefile 來管理專案的話，這邊提供最簡單導入NewLib的作法：</p>
<ol>
<li>抓heap_useNewlib_ST.c丟到FreeRTOS的資料夾</li>
<li>makefile 移除sysmem.c 以及 heap_x.c 這兩個檔</li>
<li>於FreeRTOSconfig.h 新增以下define <pre><code>#define configUSE_NEWLIB_REENTRANT               1
#define configISR_STACK_SIZE_WORDS               (0x100) // in WORDS, must be valid constant for GCC assembler</code></pre></li>
</ol>
<p>完成後可以發現，不需要誇張加大stak size 也可以輕鬆使用<code>printf %f</code>，並且不會再無預警發生當機事件了。</p>
<p>太好了又可以繼續開心使用了！</p>
<h1 id="reference">Reference</h1>
<ol>
<li><a href="https://seanzhengw.github.io/blog/freertos/2019/05/05/FreeRTOS-Task-Size.html">https://seanzhengw.github.io/blog/freertos/2019/05/05/FreeRTOS-Task-Size.html</a></li>
<li><a href="https://stackoverflow.com/questions/28334435/stm32-printf-float-variable">https://stackoverflow.com/questions/28334435/stm32-printf-float-variable</a></li>
<li><a href="https://blog.csdn.net/tao475824827/article/details/107477724">https://blog.csdn.net/tao475824827/article/details/107477724</a></li>
<li><a href="http://www.openrtos.net/FreeRTOS_Support_Forum_Archive/December_2016/freertos_sprintf_f_corrupts_stack_8fbac97dj.html">http://www.openrtos.net/FreeRTOS_Support_Forum_Archive/December_2016/freertos_sprintf_f_corrupts_stack_8fbac97dj.html</a></li>
<li><a href="https://blog.csdn.net/tao475824827/article/details/107477724">https://blog.csdn.net/tao475824827/article/details/107477724</a></li>
<li><a href="https://github.com/DRNadler/FreeRTOS_helpers">https://github.com/DRNadler/FreeRTOS_helpers</a></li>
<li><a href="https://nadler.com/embedded/newlibAndFreeRTOS.html">https://nadler.com/embedded/newlibAndFreeRTOS.html</a></li>
</ol>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Gitlab-Runner 安裝</title>
        <author>
            <name>Kenny Chan</name>
        </author>
        <link href="https://labujuice.github.io/my_blog/gitlab-runner-2.html"/>
        <id>https://labujuice.github.io/my_blog/gitlab-runner-2.html</id>
            <category term="Git"/>

        <updated>2021-03-15T11:49:22+08:00</updated>
            <summary>
                <![CDATA[
                    CI/CD 這啥？全名Continuous integration/Continuous Deployment， 字義上來看就是持續整合持續部署， 舉個栗子：程式寫完有個打工小弟自動幫你做一次編譯接著將你的專案燒錄到你的目標裝置檢查整個過程中會不會有出現非預期的情況。 用了版本管控之後，如果是一人獨自使用，那也許不大會遇到問題，除非自己有許多台電腦交互使用，可能會發生多人混戰時常看到的漏檔案事件。這時候肯定是哀聲四起，除了將自己新寫的東西stash起來，或者複製一份到別的地方再慢慢整合再一起，最後還不小心失敗，相信大家都很有經驗了。 如果有了CI Server 每一筆push commit 都做檢查，是不是就不會讓大家抓到缺少檔案的專案？ 或者是 亂寫編譯不過關打壞的專案？ 這樣還不夠，如果每一個專案的參與者都把自己要開發的部分切出branch獨立開ㄈ 等到確定沒問題的時候在merge回去master這樣不是更單純嗎？不過關的人永遠不會上master 這個branch，也省下了退版與修正的工了。 這個GitLab runner 需要搭配的是 Gitlab的版本控制server，一般來說官方的免費repo就搭配Gitlab-Runner進行CI了，所以第一步是要確定你是使用Gitlab進行版控的。 安裝這東西主要分兩種途徑，直接下載安裝 or 懶惰鬼script安裝 到這邊找你需要的版本，直接下載下來安裝。 或者打以下的指令進行下載 curl -LJO &quot;https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_${arch}.deb&quot;安裝dpkg -i gitlab-runner_&lt;arch&gt;.deb懶人script安裝也有發現網友不知從那挖到的懶人script apt 安裝大法 curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bashsudo apt-get install gitlab-runner這樣就可以直接使用apt對gitlab-runner進行管理了。 直接執行 gitlab-runner -v&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="cicd-這啥？">CI/CD 這啥？</h1>
<p>全名Continuous integration/Continuous Deployment， 字義上來看就是持續整合持續部署， 舉個栗子：程式寫完有個打工小弟自動幫你做一次編譯接著將你的專案燒錄到你的目標裝置檢查整個過程中會不會有出現非預期的情況。</p>
<h2 id="可以幹嘛？？">可以幹嘛？？</h2>
<p>用了版本管控之後，如果是一人獨自使用，那也許不大會遇到問題，除非自己有許多台電腦交互使用，可能會發生多人混戰時常看到的漏檔案事件。
這時候肯定是哀聲四起，除了將自己新寫的東西stash起來，或者複製一份到別的地方再慢慢整合再一起，最後還不小心失敗，相信大家都很有經驗了。</p>
<p>如果有了CI Server 每一筆push commit 都做檢查，是不是就不會讓大家抓到缺少檔案的專案？ 或者是 亂寫編譯不過關打壞的專案？</p>
<h2 id="有啥好處？">有啥好處？</h2>
<p>這樣還不夠，如果每一個專案的參與者都把自己要開發的部分切出branch獨立開ㄈ 等到確定沒問題的時候在merge回去master這樣不是更單純嗎？不過關的人永遠不會上master 這個branch，也省下了退版與修正的工了。</p>
<h1 id="如何開始？">如何開始？</h1>
<h2 id="gitlab">Gitlab</h2>
<p>這個GitLab runner 需要搭配的是 Gitlab的版本控制server，一般來說官方的免費repo就搭配Gitlab-Runner進行CI了，所以第一步是要確定你是使用Gitlab進行版控的。</p>
<h2 id="gitlab-runner-安裝">Gitlab-Runner 安裝</h2>
<p>安裝這東西主要分兩種途徑，<strong>直接下載安裝</strong> or <strong>懶惰鬼script安裝</strong></p>
<h3 id="直接下載安裝">直接下載安裝</h3>
<h4 id="下載">下載</h4>
<p>到<a href="https://gitlab-runner-downloads.s3.amazonaws.com/latest/index.html">這邊</a>找你需要的版本，直接下載下來安裝。</p>
<p>或者打以下的指令進行下載</p>
<pre><code>curl -LJO &quot;https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_${arch}.deb&quot;</code></pre><h4 id="安裝">安裝</h4>
<pre><code>dpkg -i gitlab-runner_&lt;arch&gt;.deb</code></pre><h3 id="懶人script安裝">懶人script安裝</h3>
<p>也有發現網友不知從那挖到的懶人script apt 安裝大法</p>
<pre><code>curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bash
sudo apt-get install gitlab-runner</code></pre><p>這樣就可以直接使用apt對gitlab-runner進行管理了。</p>
<h3 id="檢查是否安裝成功">檢查是否安裝成功</h3>
<p>直接執行 <code>gitlab-runner -v</code> 看看有沒有執行到就知道有沒有安裝成功了，有的話應該要有以下訊息 :</p>
<pre><code>Version:      13.9.0
Git revision: 2ebc4dc4
Git branch:   13-9-stable
GO version:   go1.13.8
Built:        2021-02-22T20:17:08+0000
OS/Arch:      linux/amd64</code></pre><h2 id="系統配置">系統配置</h2>
<p>安裝完成後，我們會希望這個CI server以後開機起來可以自己執行，並且可以自己執行任務，根據Gitlab-runner的設計，它自動帶起的功能是透過sudo去執行的，並且會去讀取系統root內的設定檔。如果不使用sudo執行，則是判斷為user mode，這應該是用來做人工帶起測試使用的，設定檔會被存在user底下的document內。</p>
<p>根據我的需求我需要這一台電腦未來開機連上server後就隨時等待處理被派發的任務了，因此需要進行權限的設置。 網路上有很多網友不同的設定方式，我這邊以最簡單的設定為主。</p>
<h3 id="權限設置">權限設置</h3>
<p>先進行<code>Gitlab-runner</code>的權限設定</p>
<pre><code>sudo chmod + x / usr/bin/gitlab - runner</code></pre><h3 id="開機自動開啟服務">開機自動開啟服務</h3>
<p>還沒寫QQ </p>
<p>sudo systemctl enable /etc/systemd/system/gitlab-runner.service</p>
<h1 id="references">References</h1>
<p><a href="https://docs.gitlab.com/runner/install/linux-manually.html">https://docs.gitlab.com/runner/install/linux-manually.html</a>
<a href="https://ithelp.ithome.com.tw/articles/10218938">https://ithelp.ithome.com.tw/articles/10218938</a>
<a href="https://docs.gitlab.com/runner/configuration/init.html">https://docs.gitlab.com/runner/configuration/init.html</a></p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Docker 3 use container to compile</title>
        <author>
            <name>Kenny Chan</name>
        </author>
        <link href="https://labujuice.github.io/my_blog/docker-3-shi-yongcontainer.html"/>
        <id>https://labujuice.github.io/my_blog/docker-3-shi-yongcontainer.html</id>
            <category term="Docker"/>

        <updated>2021-03-10T23:16:42+08:00</updated>
            <summary>
                <![CDATA[
                    Container 到底要怎麼用呢執行指令得到image後，我們可以透過docker run &lt;image name&gt; &lt;CMD&gt; 執行，被開起來的image稱為container，但是按照上面的指令開下去很快就離開了，例如： image run ubuntu echo hi 。 原因是container的存在是需要精神糧食的，必須要有程式不斷在執行或者是背景有個service在運作，而最簡單讓他活在當下的作法就是讓他前景執行終端機 docker run -it ubuntu ，這樣子就會讓這個container一直存在著，可以開另外一個terminal執行 docker ps 應該可以看到他一直在執行中。 因此如果我需要這個container一直在背景活著怎麼做呢？ while [TRUE]; do echo QQ; sleep 1; done這時候每隔一秒鐘就會印一次QQ，藉此讓這個程式一直活著。 這是看到許多網友的作法，但我覺的不太好。直接讓這個container用交互背景模式下去跑 docker run -id ubuntu這時候會回一堆亂數字後就退出，但是利用 docker ps 是可以發現這個container確實在背景執行著。背景執行指令如果要在背景執行的contianer執行一些指令，則是 docker exec &lt;container name&gt; &lt;cmd&gt;離開contianer直接砍掉在背景執行的container等於在前景執行 exit，手法是&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="container-到底要怎麼用呢">Container 到底要怎麼用呢</h2>
<h3 id="執行指令">執行指令</h3>
<p>得到image後，我們可以透過<code>docker run &lt;image name&gt; &lt;CMD&gt;</code> 執行，被開起來的image稱為container，但是按照上面的指令開下去很快就離開了，例如： <code>image run ubuntu echo hi</code> 。</p>
<h3 id="前景執行">前景執行</h3>
<p>原因是container的存在是需要精神糧食的，必須要有程式不斷在執行或者是背景有個service在運作，而最簡單讓他活在當下的作法就是讓他前景執行終端機 <code>docker run -it ubuntu</code> ，這樣子就會讓這個container一直存在著，可以開另外一個terminal執行 <code>docker ps</code> 應該可以看到他一直在執行中。</p>
<h3 id="背景執行">背景執行</h3>
<p>因此如果我需要這個container一直在背景活著怎麼做呢？ </p>
<ol>
<li>可以寫一個垃圾script讓他一直執行著不會出來，example：<pre><code>while [TRUE]; do echo QQ; sleep 1; done</code></pre>這時候每隔一秒鐘就會印一次QQ，藉此讓這個程式一直活著。  這是看到許多網友的作法，但我覺的不太好。</li>
<li>直接讓這個container用交互背景模式下去跑 <pre><code>docker run -id ubuntu</code></pre>這時候會回一堆亂數字後就退出，但是利用 <code>docker ps</code> 是可以發現這個container確實在背景執行著。</li>
</ol>
<h3 id="背景執行指令">背景執行指令</h3>
<p>如果要在背景執行的contianer執行一些指令，則是</p>
<pre><code>docker exec &lt;container name&gt; &lt;cmd&gt;</code></pre><h3 id="離開contianer">離開contianer</h3>
<p>直接砍掉在背景執行的container等於在前景執行 <code>exit</code>，手法是</p>
<pre><code>docker kill &lt;container name&gt;</code></pre><h2 id="映射資料夾">映射資料夾</h2>
<p>這功能主要是將電腦內的資料夾掛載入container內，讓container內也可以撈到外面的資料夾，其指令為 </p>
<pre><code>docker run -v &lt;LocalPath&gt;:&lt;ContainerPath&gt; &lt;image&gt; &lt;CMD&gt;</code></pre><p>這邊可以任意找開個資料夾做測試</p>
<pre><code>cd Desktop
mkdir LayerOne
cd LayerOne
mkdir LayerTwo_1
mkdir LayerTwo_2
mkdir LayerTwo_3

docker run -v $PWD:/home/Desktop -w /home/Desktop -it ubuntu</code></pre><p><code>-w &lt;default path&gt;</code> 進入container的目錄位置。</p>
<p>進入之後<code>ls</code> 可以發現那三個資料夾出現在container內，接著試試看 <code>rm -r *</code> 可以發現在container內已經把三個資料夾砍掉了，最後<code>exit</code> 退出回到原本電腦目錄中，可以發現那三個資料夾確實也被砍掉了，證實了這個資料夾映射確實是可以雙向共用的。</p>
<h2 id="範例">範例</h2>
<p>這邊舉一個範例是透過container進行編譯的動作：</p>
<pre><code>cd /tmp/
git clone https://github.com/Labujuice/LimitSpeedCalculator
cd LimitSpeedCalculator/Quadrotor/

docker run -v $PWD:/home/workspace -w /home/workspace kennycym/ubuntu_2004_arm_gcc_2018q2 make; ./out</code></pre><p>這個範例將下載下來的專案放入container內編譯之後在裡面執行後退出，另外一種玩法是先進入container之後在自行補上編譯與執行的指令。</p>
<pre><code>cd /tmp/
git clone https://github.com/Labujuice/LimitSpeedCalculator
cd LimitSpeedCalculator/Quadrotor/

docker run -v $PWD:/home/workspace -w /home/workspace -it kennycym/ubuntu_2004_arm_gcc_2018q2 

make
./out</code></pre><p>可以透過一些 <code>rm</code> <code>make clean</code> 等指令交互做一些比較，應該就是這麼樣一回事了。</p>
<h2 id="references">References</h2>
<ol>
<li><a href="https://docs.docker.com/engine/reference/run/">Docker Docs : Docker run reference</a></li>
<li><a href="https://docs.docker.com/engine/reference/commandline/exec/">Docker Docs : docker exec</a></li>
<li><a href="https://newtoypia.blogspot.com/2017/02/docker.html">Docker 新手第二課： 前景/背景/收工休息 圖解狀態轉換</a></li>
<li><a href="https://www.runoob.com/docker/docker-run-command.html">Docker run 命令</a></li>
</ol>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Docker 2 撰寫 Dockerfile</title>
        <author>
            <name>Kenny Chan</name>
        </author>
        <link href="https://labujuice.github.io/my_blog/docker-2-zhuan-xie-dockerfile.html"/>
        <id>https://labujuice.github.io/my_blog/docker-2-zhuan-xie-dockerfile.html</id>
            <category term="Docker"/>

        <updated>2021-03-04T15:16:34+08:00</updated>
            <summary>
                <![CDATA[
                    這是幹麻的？Docker 在我的應用是要拿來用在CI Server 上 Build code 以及做一些簡單的 unit-test，而現實的狀況是 空白的 ubuntu img 內是沒有安裝任何的 gcc, g++, gcc-arm-none-eabi, gtest 等，因此我會希望每次CI開始跑開 contiainer 就可以有這樣的環境縮短每次開始做編譯的環境架設之時間。 同理，如果單純只是想要架設一個環境來玩，玩壞了又可以再生，也是可以透過這樣的手法建立docker img，只是這一篇是以建立編譯環境作為範例而已。 先介紹幾個最基本的要素，要製作一個image檔案需要做的事情 FROM 告知你要使用那一個image來製作 LABEL 標籤，可以留下你的姓名跟電話還有想說的廢話， 例如: LABEL maintainer=&quot;kenny chan &lt;kennycym@gmail.com&gt;&quot;LABEL Description=&quot;Image for building gcc, g++, arm-gcc project.&quot;WORKDIR 執行RUN, CMD, ENTRYPOINT, COPY and ADD 的目錄&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="這是幹麻的？">這是幹麻的？</h2>
<p>Docker 在我的應用是要拿來用在CI Server 上 Build code 以及做一些簡單的 unit-test，而現實的狀況是 空白的 ubuntu img 內是沒有安裝任何的 gcc, g++, gcc-arm-none-eabi, gtest 等，因此我會希望每次CI開始跑開 contiainer 就可以有這樣的環境縮短每次開始做編譯的環境架設之時間。</p>
<p>同理，如果單純只是想要架設一個環境來玩，玩壞了又可以再生，也是可以透過這樣的手法建立docker img，只是這一篇是以建立編譯環境作為範例而已。</p>
<h2 id="dockerfile-常用基本指令">Dockerfile 常用基本指令</h2>
<p>先介紹幾個最基本的要素，要製作一個image檔案需要做的事情</p>
<p><code>FROM</code> 告知你要使用那一個image來製作</p>
<p><code>LABEL</code> 標籤，可以留下你的姓名跟電話還有想說的廢話， 例如:</p>
<pre><code>LABEL maintainer=&quot;kenny chan &lt;kennycym@gmail.com&gt;&quot;
LABEL Description=&quot;Image for building gcc, g++, arm-gcc project.&quot;</code></pre><p><code>WORKDIR</code> 執行RUN, CMD, ENTRYPOINT, COPY and ADD 的目錄</p>
<p><code>ADD</code> 將檔案或者資料夾加入 contaner </p>
<p><code>RUN</code> 執行指令，像是平常在terminal內打的指令一樣。</p>
<p><code>ENV</code> 進行一些環境相關的設定，或者變數的宣告等。</p>
<h2 id="一個範例">一個範例</h2>
<p>以我最常用的 gcc, g++, gcc-arm-none-eabi, git 製作一個dockerfile，在這個檔案開始進行之前，要先去下載我指定的gcc-arm-none-eabi 2018q2版本，並且將他放在同樣的目錄之下。</p>
<p>不知道上那下載可以<a href="https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads">點我下載</a>，如果想更換為喜歡的版本也行，就是要在修改一下檔名跟路徑。</p>
<pre><code>FROM ubuntu:20.04
LABEL maintainer=&quot;kenny chan &lt;kennycym@gmail.com&gt;&quot;
LABEL Description=&quot;Image for building gcc, g++, arm-gcc project.&quot;
WORKDIR /work

ADD . /work

# Install any needed packages specified in requirements.txt
RUN apt-get update &amp;&amp; \
    apt-get upgrade -y &amp;&amp; \
    apt-get install -y \
# Development files
      rsync \
      gcc \
      build-essential \
      git \
      bzip2 \
      wget &amp;&amp; \
    apt-get clean
RUN tar jxvf gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2

ENV PATH &quot;/work/gcc-arm-none-eabi-7-2018-q2-update/bin:$PATH&quot;
</code></pre><p>鵝～其實這個範例是修改自<a href="https://hub.docker.com/r/stronglytyped/arm-none-eabi-gcc/dockerfile">這裡</a>的。</p>
<h2 id="build-docker-img">Build Docker Img</h2>
<p>完成後我們可以先看一下目前目錄下有哪些東西</p>
<pre><code>$ ls
dockerfile  gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2</code></pre><p>確認有這兩樣東西後，接著執行 </p>
<pre><code>docker build -t ubuntu_gcc_arm_gcc . --no-cache</code></pre><p>這邊有些可說明的，加入<code>-t</code> 可以指定輸出的image ，如果要輸出至兩個或以上就直接 <code>-t image1 -t image2 ,...</code> ， 如果要指定dockerfile 則是<code>-f path/dockerfilename</code> 這樣的手法達成，但不指定就是預設當前目錄下的dockerfile。</p>
<p>後面加上 <code>--no-cache</code> 則會讓每次build都不會cache住先前的資料，雖然比較慢，但是中間失誤的機會會比較少一些。 (當然熟練的話就不需要這樣子了)</p>
<p>完成後可以使用<code>docker images</code> 來看看是否已經存在，他的長相應該會是這樣子：</p>
<pre><code>REPOSITORY                            TAG       IMAGE ID       CREATED        SIZE
ubuntu_gcc_arm_gcc                    latest    1b40dcef2857   20 hours ago   921MB
ubuntu                                20.04     f63181f19b2f   6 weeks ago    72.9MB
ubuntu                                latest    f63181f19b2f   6 weeks ago    72.9MB</code></pre><p>可以發現 <code>ubuntu_gcc_arm_gcc</code> 是存在的。</p>
<h2 id="確認系統環境">確認系統環境</h2>
<p>完成後我們可以執行該image</p>
<pre><code>docker run -it ubuntu_gcc_arm_gcc</code></pre><p>執行後應該可以進去該container的控制界面，那我們就來敲敲看各個編譯器的版本號吧！
<code>gcc -v</code>  <code>g++ -v</code> <code>arm-none-eabi-gcc -v</code></p>
<p>應該要得到的結果是：</p>
<p><strong>gcc</strong></p>
<p><code>gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)</code></p>
<p><strong>g++</strong></p>
<p><code>gcc version 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] (GNU Tools for Arm Embedded Processors 7-2018-q2-update)</code></p>
<p><strong>arm-none-eabi-gcc</strong></p>
<p><code>gcc version 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] (GNU Tools for Arm Embedded Processors 7-2018-q2-update)</code></p>
<h2 id="references">References</h2>
<ol>
<li><a href="https://docs.docker.com/engine/reference/builder/">Docker Docs: Dockerfile reference</a></li>
<li><a href="https://hub.docker.com/r/stronglytyped/arm-none-eabi-gcc/dockerfile">Docker Hub : stronglytyped/arm-none-eabi-gcc
</a></li>
<li><a href="https://ithelp.ithome.com.tw/users/20103456/ironman/1320">用30天來介紹和使用 Docker 系列</a></li>
</ol>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Docker 1 安裝</title>
        <author>
            <name>Kenny Chan</name>
        </author>
        <link href="https://labujuice.github.io/my_blog/docker-1-installatio.html"/>
        <id>https://labujuice.github.io/my_blog/docker-1-installatio.html</id>
            <category term="Docker"/>

        <updated>2021-03-04T13:47:36+08:00</updated>
            <summary>
                <![CDATA[
                    為啥需要Docker?由於近期開發的專案需要導入在Gitlab上開啟CI/CD的功能，在這之前需要先架設一台GitLab Runner，但是在一台Runner上面如果同時針對很多專案去做檢查是需要把這台SERVER的環境設置成所有專案都相容的，安裝起來相當費工夫，並且可能會在過程中發生不幸的事情。 這時候Docker的好處就展現出來了，可以輕易達成在一個SERVER上面同時滿足： 其實上網搜尋已經有很多前人的足跡，在此就不再次撰寫這篇章，不外乎就是看看Docker官方的教學文件以及上網看看前人們學習的動機與方法。 查閱Docker Docs 網頁[1]可以發現 ubuntu 安裝頁面下面有一個 現成的Shell script，直接下載執行，就可以作到最懶人的安裝方式。 curl -fsSL https://get.docker.com -o get-docker.sh sudo sh get-docker.sh另一方法則是參考其他前輩根據官網教學的指令所撰寫好的Script[2]: sudo apt-get remove -y docker docker-engine docker.io containerd runc; \sudo apt-get update &amp;&amp; \sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common &amp;&amp; \curl -fsSL https://download.docker.com/linux/ubuntu/gpg&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="為啥需要docker">為啥需要Docker?</h1>
<p>由於近期開發的專案需要導入在Gitlab上開啟CI/CD的功能，在這之前需要先架設一台GitLab Runner，但是在一台Runner上面如果同時針對很多專案去做檢查是需要把這台SERVER的環境設置成所有專案都相容的，安裝起來相當費工夫，並且可能會在過程中發生不幸的事情。</p>
<p>這時候Docker的好處就展現出來了，可以輕易達成在一個SERVER上面同時滿足：</p>
<ol>
<li>多種編譯環境</li>
<li>相互隔離</li>
<li>玩爛了不必重新安裝系統(不污染原系統)</li>
<li>可攜帶、可複製</li>
</ol>
<h1 id="如何開始第一步">如何開始第一步?</h1>
<p>其實上網搜尋已經有很多前人的足跡，在此就不再次撰寫這篇章，不外乎就是看看Docker官方的教學文件以及上網看看前人們學習的動機與方法。</p>
<h1 id="安裝懶人指令">安裝懶人指令?</h1>
<p>查閱Docker Docs 網頁[1]可以發現 ubuntu 安裝頁面下面有一個 現成的Shell script，直接下載執行，就可以作到最懶人的安裝方式。</p>
<pre><code> curl -fsSL https://get.docker.com -o get-docker.sh
 sudo sh get-docker.sh</code></pre><p>另一方法則是參考其他前輩根據官網教學的指令所撰寫好的Script[2]:</p>
<pre><code>sudo apt-get remove -y docker docker-engine docker.io containerd runc; \
sudo apt-get update &amp;&amp; \
sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common &amp;&amp; \
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - &amp;&amp; \
sudo add-apt-repository \
   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable&quot; &amp;&amp; \
sudo apt-get update &amp;&amp; \
sudo apt-get install -y docker-ce docker-ce-cli containerd.io</code></pre><h1 id="確認已經裝好？">確認已經裝好？</h1>
<p>如果已經正確安裝可以執行<code>docker</code> 來確定是否已經安裝完成，但是礙於權限應該沒辦法正確執行，故執行以下指令將docker設置為每個使用者都可以執行的權限。</p>
<pre><code>sudo usermod -aG docker &lt;your-user&gt;</code></pre><p>接著登出在登入應該就可以正常執行，並且可以透過 <code>docker -v</code>確認目前安裝之版本號。</p>
<h1 id="references">References</h1>
<ol>
<li><a href="https://docs.docker.com/">Docker Docs</a></li>
<li><a href="https://caloskao.org/install-docker-on-ubuntu-20-04-focal-fossa/">https://caloskao.org/install-docker-on-ubuntu-20-04-focal-fossa/</a></li>
</ol>

            ]]>
        </content>
    </entry>
</feed>
